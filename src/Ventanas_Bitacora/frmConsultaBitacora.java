/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas_Bitacora;

import Clases_Modulo_Seguridad.Bitacora;
import Clases_Modulo_Transporte.CargaCombustible;
import Clases_Modulo_Transporte.OrdenServicio;
import Clases_Modulo_Transporte.Vehiculo;
import GUtilr.ireport.GestorDeReportes;
import Gestores_Clases.gestorBitacora;
import Gestores_Vista.gestorConsultarConsumo;
import Gestores_Vista.gestorFecha;
import Hibernate.GestorHibernate;
import java.awt.*;
import java.awt.print.PrinterException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carolina
 */
public class frmConsultaBitacora extends javax.swing.JInternalFrame {
GestorHibernate gestorH = new GestorHibernate();
gestorBitacora gestorB = new gestorBitacora();
    /**
     * Creates new form frmConsultaBitacora
     */
    public frmConsultaBitacora() {
        initComponents();
        
        txtHora.setEnabled(false);
        txtHora.setEditable(false);
        txtFecha.setEditable(false);
        txtFecha.setEnabled(false);
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFecha.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHora.setText(formateadorHora.format(calendario.getTime()));
        
        
        //redimensionar columnas de la tabla Consumo
        tblBitacora.getColumnModel().getColumn(0).setPreferredWidth(50);
        tblBitacora.getColumnModel().getColumn(1).setPreferredWidth(50);
        tblBitacora.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblBitacora.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblBitacora.getColumnModel().getColumn(4).setPreferredWidth(50);
        
        //centrar cabecera jtable
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tblBitacora.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        DefaultTableCellRenderer renderer1 = (DefaultTableCellRenderer) tblTipOp.getTableHeader().getDefaultRenderer();
        renderer1.setHorizontalAlignment(0);
        DefaultTableCellRenderer renderer2 = (DefaultTableCellRenderer) tblTipoComp.getTableHeader().getDefaultRenderer();
        renderer2.setHorizontalAlignment(0);
        DefaultTableCellRenderer renderer3 = (DefaultTableCellRenderer) tblUsuario.getTableHeader().getDefaultRenderer();
        renderer3.setHorizontalAlignment(0);
        
        //Las siguientes lineas son para dar a la pantalla el tamaño requerido y luego centrarla en la pantalla.
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 1110;
        int alto = 635;
        int posX = (int) ((tamanioPantalla.width - ancho) / 2);
//        int posY = (int) ((tamanioPantalla.height - alto) / 2);
        this.setSize(ancho, alto);
        this.setLocation(120, 0);
        
        
        calendarioDBitacora.setEnabled(false);
        calendarioHBitacora.setEnabled(false);
        txtNumComp.setEnabled(false);
        cmbComp.setEnabled(false);
        cmbTipoComp.setEnabled(false);
        btnAgregarTipo.setEnabled(false);
        btnQuitarTipo.setEnabled(false);
        cmbTipoOp.setEnabled(false);
        btnAgregarOp.setEnabled(false);
        btnQuitarOp.setEnabled(false);
        cmbUsuario.setEnabled(false);
        btnAgregarUs.setEnabled(false);
        btnQuitarUs.setEnabled(false);
        cmbTipoComp.setModel(gestorB.getComboModelTipoComp());
        cmbTipoOp.setModel(gestorB.getComboModelTipoOperacion());
        cmbUsuario.setModel(gestorB.getComboModelUsuario());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        labelUsuario = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnBuscarMov = new javax.swing.JButton();
        ckFecha = new javax.swing.JCheckBox();
        ckNumComp = new javax.swing.JCheckBox();
        ckUsuario = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        calendarioHBitacora = new datechooser.beans.DateChooserCombo();
        calendarioDBitacora = new datechooser.beans.DateChooserCombo();
        jPanel12 = new javax.swing.JPanel();
        txtNumComp = new javax.swing.JTextField();
        cmbComp = new javax.swing.JComboBox();
        btnAceptarTodos = new javax.swing.JButton();
        btnCancelarTodos = new javax.swing.JButton();
        ckTipoComp = new javax.swing.JCheckBox();
        ckTipoOp = new javax.swing.JCheckBox();
        jPanel23 = new javax.swing.JPanel();
        cmbUsuario = new javax.swing.JComboBox();
        btnAgregarUs = new javax.swing.JButton();
        btnQuitarUs = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblUsuario = new javax.swing.JTable();
        jPanel25 = new javax.swing.JPanel();
        cmbTipoComp = new javax.swing.JComboBox();
        btnAgregarTipo = new javax.swing.JButton();
        btnQuitarTipo = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblTipoComp = new javax.swing.JTable();
        jPanel26 = new javax.swing.JPanel();
        cmbTipoOp = new javax.swing.JComboBox();
        btnAgregarOp = new javax.swing.JButton();
        btnQuitarOp = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblTipOp = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBitacora = new javax.swing.JTable();
        btnImprimir = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Bitácora");

        jPanel3.setLayout(null);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Fecha");
        jPanel3.add(jLabel9);
        jLabel9.setBounds(10, 13, 50, 15);
        jPanel3.add(txtFecha);
        txtFecha.setBounds(50, 10, 90, 20);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setText("Hora");
        jPanel3.add(jLabel10);
        jLabel10.setBounds(200, 10, 40, 20);
        jPanel3.add(txtHora);
        txtHora.setBounds(230, 10, 70, 20);

        labelUsuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelUsuario.setText("Usuario");
        jPanel3.add(labelUsuario);
        labelUsuario.setBounds(960, 10, 50, 15);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel3.add(jLabel12);
        jLabel12.setBounds(1010, 0, 30, 30);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Consultar Movimientos por", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        jPanel4.setLayout(null);

        btnBuscarMov.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnBuscarMov.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscarMov.setText("Buscar");
        btnBuscarMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMovActionPerformed(evt);
            }
        });
        jPanel4.add(btnBuscarMov);
        btnBuscarMov.setBounds(490, 270, 104, 30);

        ckFecha.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckFecha.setText("Fecha");
        ckFecha.setFocusPainted(false);
        jPanel4.add(ckFecha);
        ckFecha.setBounds(10, 30, 110, 22);

        ckNumComp.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckNumComp.setText("Número Comprobante");
        ckNumComp.setFocusPainted(false);
        jPanel4.add(ckNumComp);
        ckNumComp.setBounds(10, 50, 140, 22);

        ckUsuario.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckUsuario.setText("Usuario");
        ckUsuario.setFocusPainted(false);
        jPanel4.add(ckUsuario);
        ckUsuario.setBounds(10, 110, 90, 22);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel10.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Desde");
        jPanel10.add(jLabel7);
        jLabel7.setBounds(30, 40, 60, 20);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Hasta");
        jPanel10.add(jLabel13);
        jLabel13.setBounds(30, 70, 60, 20);
        jPanel10.add(calendarioHBitacora);
        calendarioHBitacora.setBounds(70, 70, 90, 20);
        jPanel10.add(calendarioDBitacora);
        calendarioDBitacora.setBounds(70, 40, 90, 20);

        jPanel4.add(jPanel10);
        jPanel10.setBounds(160, 20, 200, 120);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nº Comprobante", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel12.setLayout(null);
        jPanel12.add(txtNumComp);
        txtNumComp.setBounds(100, 60, 90, 20);

        cmbComp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "=", "<=" }));
        jPanel12.add(cmbComp);
        cmbComp.setBounds(10, 60, 80, 20);

        jPanel4.add(jPanel12);
        jPanel12.setBounds(360, 20, 200, 120);

        btnAceptarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAceptarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarTodosActionPerformed(evt);
            }
        });
        jPanel4.add(btnAceptarTodos);
        btnAceptarTodos.setBounds(20, 150, 30, 30);

        btnCancelarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnCancelarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarTodosActionPerformed(evt);
            }
        });
        jPanel4.add(btnCancelarTodos);
        btnCancelarTodos.setBounds(50, 150, 30, 30);

        ckTipoComp.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckTipoComp.setText("Tipo Comprobante");
        ckTipoComp.setFocusPainted(false);
        jPanel4.add(ckTipoComp);
        ckTipoComp.setBounds(10, 70, 140, 22);

        ckTipoOp.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckTipoOp.setText("Tipo Operación");
        ckTipoOp.setFocusPainted(false);
        jPanel4.add(ckTipoOp);
        ckTipoOp.setBounds(10, 90, 140, 22);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Usuario", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        btnAgregarUs.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAgregarUs.setText(">");
        btnAgregarUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarUsActionPerformed(evt);
            }
        });

        btnQuitarUs.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnQuitarUs.setText("<");
        btnQuitarUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarUsActionPerformed(evt);
            }
        });

        tblUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblUsuario);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                        .addComponent(cmbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarUs))
                    .addComponent(btnQuitarUs, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel23Layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAgregarUs)))
                        .addGroup(jPanel23Layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(btnQuitarUs))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel23);
        jPanel23.setBounds(620, 140, 460, 120);

        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipo Comprobante", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        btnAgregarTipo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAgregarTipo.setText(">");
        btnAgregarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTipoActionPerformed(evt);
            }
        });

        btnQuitarTipo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnQuitarTipo.setText("<");
        btnQuitarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarTipoActionPerformed(evt);
            }
        });

        tblTipoComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Comprobante"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblTipoComp);

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel25Layout.createSequentialGroup()
                        .addComponent(cmbTipoComp, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarTipo))
                    .addComponent(btnQuitarTipo, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbTipoComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAgregarTipo)))
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(btnQuitarTipo)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.add(jPanel25);
        jPanel25.setBounds(560, 20, 460, 120);

        jPanel26.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipo Operación", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        btnAgregarOp.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAgregarOp.setText(">");
        btnAgregarOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarOpActionPerformed(evt);
            }
        });

        btnQuitarOp.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnQuitarOp.setText("<");
        btnQuitarOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarOpActionPerformed(evt);
            }
        });

        tblTipOp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Operación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblTipOp);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                        .addComponent(cmbTipoOp, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarOp))
                    .addComponent(btnQuitarOp, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel26Layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbTipoOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAgregarOp)))
                        .addGroup(jPanel26Layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(btnQuitarOp))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel26);
        jPanel26.setBounds(160, 140, 460, 120);

        tblBitacora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Número Operación", "Tipo Comprobante", "Tipo Operación", "Usuario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBitacora);

        btnImprimir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel8.setText("Detalle de Movimientos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1091, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(428, 428, 428)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 836, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1091, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(453, 453, 453)
                        .addComponent(jLabel8)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea salir?");
        if (respuesta == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAceptarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodosActionPerformed
        if (ckFecha.isSelected()) {
            calendarioDBitacora.setEnabled(true);
            calendarioHBitacora.setEnabled(true);
        }
        if (ckNumComp.isSelected()) {
            cmbComp.setEnabled(true);
            txtNumComp.setEnabled(true);
        }
        if (ckTipoComp.isSelected()) {
            cmbTipoComp.setEnabled(true);
            btnAgregarTipo.setEnabled(true);
            btnQuitarTipo.setEnabled(true);
        }
        if (ckTipoOp.isSelected()) {
            cmbTipoOp.setEnabled(true);
            btnAgregarOp.setEnabled(true);
            btnQuitarOp.setEnabled(true);
        }
        if (ckUsuario.isSelected()){
            cmbUsuario.setEnabled(true);
            btnAgregarUs.setEnabled(true);
            btnQuitarUs.setEnabled(true);
        }
    }//GEN-LAST:event_btnAceptarTodosActionPerformed

    private void btnCancelarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarTodosActionPerformed
        calendarioDBitacora.setEnabled(false);
        calendarioHBitacora.setEnabled(false);
        cmbComp.setEnabled(false);
        txtNumComp.setEnabled(false);
        txtNumComp.setEnabled(false);
        cmbTipoComp.setEnabled(false);
        btnAgregarTipo.setEnabled(false);
        btnQuitarTipo.setEnabled(false);
        cmbTipoOp.setEnabled(false);
        btnAgregarOp.setEnabled(false);
        btnQuitarOp.setEnabled(false);
        cmbUsuario.setEnabled(false);
        btnAgregarUs.setEnabled(false);
        btnQuitarUs.setEnabled(false);
        DefaultTableModel modelo = (DefaultTableModel) tblTipOp.getModel();
        modelo.setRowCount(0);
        tblTipOp.setModel(modelo);
        DefaultTableModel modelo1 = (DefaultTableModel) tblTipoComp.getModel();
        modelo1.setRowCount(0);
        tblTipoComp.setModel(modelo1);
        DefaultTableModel modelo2 = (DefaultTableModel) tblUsuario.getModel();
        modelo2.setRowCount(0);
        tblUsuario.setModel(modelo2);
    }//GEN-LAST:event_btnCancelarTodosActionPerformed

    private void btnBuscarMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMovActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
        SimpleDateFormat sdfguion = new SimpleDateFormat("dd-MM-yyyy");
        Date fecha1=sdf.parse(calendarioDBitacora.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHBitacora.getText(), new ParsePosition(0));
        DefaultTableModel modeloT = (DefaultTableModel) tblBitacora.getModel();

        
         if(fecha1.before(fecha3)|| calendarioDBitacora.isEnabled()==false || fecha1.equals(fecha3)){
             
         //Consulta por FECHA
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                  //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  }
             }
         }
         //Consulta por NRO de COMPROBANTE
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                        if ((bandera==0) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                        //Guardo el objeto en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                  }
             }
             if (cmbComp.getSelectedItem() == "<=") {
                        if ((bandera==0) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                        //Guardo el objeto en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                  }
             }
             if (cmbComp.getSelectedItem() == "=") {
                        if ((bandera==0) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                        //Guardo el objeto en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                  }
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         //Consulta por TIPO de COMPROBANTE
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0))) {
                    //Guardo el objeto orden en la tabla
                 gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
               
             }//Fin While 
         }//Fin Consulta Tipo Comp
         
         //Consulta por TIPO OPERACION
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0))) {
                    //Guardo el objeto orden en la tabla
                 gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
               
             }//Fin While 
         }//Fin Consulta Tipo Operacion
         
         //Consulta por USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             System.out.println(bit.getUsuario());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                if ((bandera==0) && (bit.getUsuario().equalsIgnoreCase(tblUsuario.getValueAt(i, 0).toString()))) {
                    //Guardo el objeto orden en la tabla
                 gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
               
             }//Fin While 
         }//Fin Consulta USUARIO
         
         //Consulta por FECHA - NRO COMPROBANTE
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                        if ((bandera==0) && (numero >= Integer.parseInt(txtNumComp.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                        //Guardo el objeto en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                  }
             }
             if (cmbComp.getSelectedItem() == "<=") {
                        if ((bandera==0) && (numero <= Integer.parseInt(txtNumComp.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                        //Guardo el objeto en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                  }
             }
             if (cmbComp.getSelectedItem() == "=") {
                        if ((bandera==0) && (numero == Integer.parseInt(txtNumComp.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                        //Guardo el objeto en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                  }
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
             
         //Consulta por FECHA - TIPO de COMPROBANTE
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                    //Guardo el objeto orden en la tabla
                 gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
               
             }//Fin While 
         }//Fin Consulta Tipo Comp
         
          //Consulta por FECHA - TIPO OPERACION
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                    //Guardo el objeto orden en la tabla
                 gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
               
             }//Fin While 
         }//Fin Consulta Tipo Operacion
         
         //Consulta por FECHA - USUARIO
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                    //Guardo el objeto orden en la tabla
                 gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
               
             }//Fin While 
         }//Fin Consulta USUARIO
         
         //Consulta por NRO de COMPROBANTE - TIPO COMPROBANTE
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         //Consulta por NRO de COMPROBANTE - TIPO OPERACION
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtNumComp.getText())) ) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For   
             }
             if (cmbComp.getSelectedItem() == "<=") {
               for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (numero <= Integer.parseInt(txtNumComp.getText())) ) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For
             }
             if (cmbComp.getSelectedItem() == "=") {
                for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (numero == Integer.parseInt(txtNumComp.getText())) ) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         //Consulta por NRO de COMPROBANTE - USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                        } //Cierre If Carga
                        }//Fin For  
             }
             if (cmbComp.getSelectedItem() == "<=") {
                        for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(i, 0)) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                        } //Cierre If Carga
                        }//Fin For 
             }
             if (cmbComp.getSelectedItem() == "=") {
                        for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(i, 0)) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                        } //Cierre If Carga
                        }//Fin For 
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         //Consulta por TIPO OPERACION - USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                for (int j = 0; j < tblUsuario.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorB.cargarTabla(tblBitacora, bit);
                        } //Cierre If Carga
                        }//Fin For 
               }//Fin For   
             }//Fin While 
         }//Fin Consulta Tipo Operacion
         
         //Consulta por TIPO de COMPROBANTE - TIPO OPERACION
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
             }//Fin While 
         }//Fin Consulta Tipo Comp
         
         //Consulta por TIPO de COMPROBANTE - USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblUsuario.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
             }//Fin While 
         }//Fin Consulta Tipo Comp
         
         //Consulta por FECHA - NRO COMPROBANTE - TIPO COMPROBANTE
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For      
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
         
         //Consulta por FECHA - NRO COMPROBANTE - TIPO OPERACION
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For      
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
         
         //Consulta por FECHA - NRO COMPROBANTE - USUARIO
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblUsuario.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For      
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblUsuario.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblUsuario.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblUsuario.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
         
          //Consulta por NRO de COMPROBANTE - TIPO COMPROBANTE - USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblUsuario.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero >= Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for                
             }
             if (cmbComp.getSelectedItem() == "<=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblUsuario.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero <= Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
             }
             if (cmbComp.getSelectedItem() == "=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblUsuario.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero == Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         //Consulta por NRO de COMPROBANTE - TIPO COMPROBANTE - TIPO OPERACION
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero >= Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for                
             }
             if (cmbComp.getSelectedItem() == "<=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero <= Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
             }
             if (cmbComp.getSelectedItem() == "=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero == Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
          //Consulta por TIPO de COMPROBANTE - TIPO OPERACION - USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled()==false && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblUsuario.getRowCount(); j++) {
                     for(int k = 0; k<tblTipOp.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (bit.getOperacion() == tblTipOp.getValueAt(k, 0)) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
                 }//Fin for
               }//Fin For 
             }//Fin for  
             }//Fin While 
         }//Fin Consulta Tipo Comp
         
         //Consulta por FECHA - NRO COMPROBANTE - TIPO OPERACION - TIPO COMPROBANTE
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && tblTipOp.isEnabled() && tblTipoComp.isEnabled() && tblUsuario.isEnabled()==false){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                      for(int j = 0; j< tblTipoComp.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For      
                  }//Fin For
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                       for(int j = 0; j< tblTipoComp.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
                   }//Fin For
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                      for(int j = 0; j< tblTipoComp.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
                  }//Fin For
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
         
         //Consulta por FECHA - NRO COMPROBANTE - USUARIO - TIPO COMPROBANTE
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && cmbTipoOp.isEnabled()==false && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                      for(int j = 0; j< tblUsuario.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For      
                  }//Fin For
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                       for(int j = 0; j< tblUsuario.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
                   }//Fin For
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                      for(int j = 0; j< tblUsuario.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
                  }//Fin For
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
         
          //Consulta por FECHA - NRO COMPROBANTE - USUARIO - TIPO OPERACION
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled()==false && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             if (cmbComp.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                      for(int j = 0; j< tblUsuario.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero >= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For      
                  }//Fin For
                 
             }
             if (cmbComp.getSelectedItem() == "<=") {
                   for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                       for(int j = 0; j< tblUsuario.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero <= Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
                   }//Fin For
             }
             if (cmbComp.getSelectedItem() == "=") {
                  for (int i = 0; i < tblTipOp.getRowCount(); i++) {
                      for(int j = 0; j< tblUsuario.getRowCount(); j++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(i, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) && (numero == Integer.parseInt(txtNumComp.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For  
                  }//Fin For
             }                    
                 //Guardo el objeto orden en la tabla
                  gestorB.cargarTabla(tblBitacora, bit);
                  
             }
         }
         
         //Consulta por NRO de COMPROBANTE - TIPO COMPROBANTE - TIPO OPERACION - USUARIO
         if(calendarioDBitacora.isEnabled()==false && calendarioHBitacora.isEnabled()==false && txtNumComp.isEnabled() && cmbTipoOp.isEnabled() && cmbTipoComp.isEnabled() && cmbUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     for(int k = 0; k<tblUsuario.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0))&& (bit.getUsuario() == tblUsuario.getValueAt(k, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero >= Integer.parseInt(txtNumComp.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1))) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for 
                 }//Fin For
             }
             if (cmbComp.getSelectedItem() == "<=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     for(int k=0; k<tblUsuario.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(k, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero <= Integer.parseInt(txtNumComp.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
                 }//Fin For
             }
             if (cmbComp.getSelectedItem() == "=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     for(int k=0; k<tblUsuario.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(k, 0)) &&(bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero == Integer.parseInt(txtNumComp.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
                 }//Fin For
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         //Consulta por NRO de COMPROBANTE - TIPO COMPROBANTE - TIPO OPERACION - USUARIO - FECHA
         if(calendarioDBitacora.isEnabled() && calendarioHBitacora.isEnabled() && txtNumComp.isEnabled() && tblTipOp.isEnabled() && tblTipoComp.isEnabled() && tblUsuario.isEnabled()){
         Iterator ite = gestorH.listarClase(Bitacora.class).iterator();
         while(ite.hasNext()){
             Bitacora bit = (Bitacora) ite.next();
             int bandera = gestorB.buscarObjeto(tblBitacora, bit);
             int numero = Integer.parseInt(bit.getNroComprobante());
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(bit.getFecha());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
                }
             if (cmbComp.getSelectedItem() == ">=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     for(int k = 0; k<tblUsuario.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0))&& (bit.getUsuario() == tblUsuario.getValueAt(k, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero >= Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for 
                 }//Fin For
             }
             if (cmbComp.getSelectedItem() == "<=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     for(int k=0; k<tblUsuario.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(k, 0)) && (bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero <= Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
                 }//Fin For
             }
             if (cmbComp.getSelectedItem() == "=") {
                 for (int i = 0; i < tblTipoComp.getRowCount(); i++) {
                 for (int j = 0; j < tblTipOp.getRowCount(); j++) {
                     for(int k=0; k<tblUsuario.getRowCount();k++){
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (bit.getOperacion() == tblTipOp.getValueAt(j, 0)) && (bit.getUsuario() == tblUsuario.getValueAt(k, 0)) &&(bit.getTipoComp() == tblTipoComp.getValueAt(i, 0)) &&(numero == Integer.parseInt(txtNumComp.getText())) ){
                    //Guardo el objeto orden en la tabla
                    gestorB.cargarTabla(tblBitacora, bit);
                  } //Cierre If Carga
               }//Fin For 
             }//Fin for  
                 }//Fin For
             }   
               
             }//Fin While
         }//Fin Consulta NRo Comp
         
         }else {
         JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");
         }
         
    }//GEN-LAST:event_btnBuscarMovActionPerformed

    private void btnAgregarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTipoActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTipoComp.getModel();
        Object fila[]={cmbTipoComp.getSelectedItem()};
        modelo.addRow(fila);
        tblTipoComp.setModel(modelo);   
    }//GEN-LAST:event_btnAgregarTipoActionPerformed

    private void btnQuitarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTipoActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTipoComp.getModel();
        int fila = tblTipoComp.getSelectedRow();
        modelo.removeRow(fila);
        tblTipoComp.setModel(modelo);
    }//GEN-LAST:event_btnQuitarTipoActionPerformed

    private void btnAgregarOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarOpActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTipOp.getModel();
        Object fila[]={cmbTipoOp.getSelectedItem()};
        modelo.addRow(fila);
        tblTipOp.setModel(modelo); 
    }//GEN-LAST:event_btnAgregarOpActionPerformed

    private void btnQuitarOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarOpActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTipOp.getModel();
        int fila = tblTipOp.getSelectedRow();
        modelo.removeRow(fila);
        tblTipOp.setModel(modelo);
    }//GEN-LAST:event_btnQuitarOpActionPerformed

    private void btnAgregarUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarUsActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblUsuario.getModel();
        Object fila[]={cmbUsuario.getSelectedItem()};
        modelo.addRow(fila);
        tblUsuario.setModel(modelo); 
    }//GEN-LAST:event_btnAgregarUsActionPerformed

    private void btnQuitarUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarUsActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblUsuario.getModel();
        int fila = tblUsuario.getSelectedRow();
        modelo.removeRow(fila);
        tblUsuario.setModel(modelo);
    }//GEN-LAST:event_btnQuitarUsActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
       DefaultTableModel modelot = (DefaultTableModel) tblBitacora.getModel();
        try {
            tblBitacora.print();
          } catch (PrinterException ex) {
            Logger.getLogger(frmConsultaBitacora.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarTodos;
    private javax.swing.JButton btnAgregarOp;
    private javax.swing.JButton btnAgregarTipo;
    private javax.swing.JButton btnAgregarUs;
    private javax.swing.JButton btnBuscarMov;
    private javax.swing.JButton btnCancelarTodos;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnQuitarOp;
    private javax.swing.JButton btnQuitarTipo;
    private javax.swing.JButton btnQuitarUs;
    private javax.swing.JButton btnSalir;
    private datechooser.beans.DateChooserCombo calendarioDBitacora;
    private datechooser.beans.DateChooserCombo calendarioHBitacora;
    private javax.swing.JCheckBox ckFecha;
    private javax.swing.JCheckBox ckNumComp;
    private javax.swing.JCheckBox ckTipoComp;
    private javax.swing.JCheckBox ckTipoOp;
    private javax.swing.JCheckBox ckUsuario;
    private javax.swing.JComboBox cmbComp;
    private javax.swing.JComboBox cmbTipoComp;
    private javax.swing.JComboBox cmbTipoOp;
    private javax.swing.JComboBox cmbUsuario;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JTable tblBitacora;
    private javax.swing.JTable tblTipOp;
    private javax.swing.JTable tblTipoComp;
    private javax.swing.JTable tblUsuario;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtNumComp;
    // End of variables declaration//GEN-END:variables
}
