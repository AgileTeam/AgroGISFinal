/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas_Transporte;

import Clases_Modulo_Cliente.*;
import javax.swing.*;
import Clases_Modulo_Transporte.*;
import Gestores_Clases.gestorBitacora;
import Gestores_Vista.*;
import Hibernate.*;
import ireport.GestorDeReportes;
import java.awt.*;
import java.text.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Carolina
 */
public class frmEliminarOrdenCarga extends javax.swing.JInternalFrame {

    
        GestorHibernate gestorH = new GestorHibernate();
        gestorConsultarConsumo gestorC = new gestorConsultarConsumo();
    
    
    public frmEliminarOrdenCarga() {
        initComponents();
        
        gestorH.actualizarUsuario(labelUsuario);
        txtHoraRep.setEnabled(false);
        txtHoraRep.setEditable(false);
        txtFechaRep.setEditable(false);
        txtFechaRep.setEnabled(false);
        
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFechaRep.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHoraRep.setText(formateadorHora.format(calendario.getTime()));

        
        //redimensionar columnas de la tabla Consumo
        tblConsumo.getColumnModel().getColumn(0).setPreferredWidth(20);
        tblConsumo.getColumnModel().getColumn(1).setPreferredWidth(20);
        tblConsumo.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblConsumo.getColumnModel().getColumn(3).setPreferredWidth(80);
        
        //centrar cabecera jtable
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tblConsumo.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        DefaultTableCellRenderer renderer2 = (DefaultTableCellRenderer) tblTransportista.getTableHeader().getDefaultRenderer();
        renderer2.setHorizontalAlignment(0);


        //Las siguientes lineas son para dar a la pantalla el tamaño requerido y luego centrarla en la pantalla.
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 900;
        int alto = 635;
        int posX = (int) ((tamanioPantalla.width - ancho) / 2);
//        int posY = (int) ((tamanioPantalla.height - alto) / 2);
        this.setSize(ancho, alto);
        this.setLocation(posX, 0);
        
        calendarioDCons.setEnabled(false);
        calendarioHCons.setEnabled(false);
        cmbImporteCons.setEnabled(false);
        cmbTranspCons.setEnabled(false);
        cmbOrden.setEnabled(false);
        txtImporteCons.setEnabled(false);
        txtOrdenCarga.setEnabled(false);
        btnAgregarTranspC.setEnabled(false);
        btnQuitarTranspC.setEnabled(false);
        cmbTranspCons.setModel(gestorC.rellenaComboTransportista());
        
        tblTransportista.setEnabled(false);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel17 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        txtHoraRep = new javax.swing.JTextField();
        txtFechaRep = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        ckFechaCons = new javax.swing.JCheckBox();
        ckOrdenCons = new javax.swing.JCheckBox();
        ckTranspCons = new javax.swing.JCheckBox();
        ckImporteCons = new javax.swing.JCheckBox();
        btnAceptarTodosR = new javax.swing.JButton();
        btnQuitarTodosR = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        calendarioHCons = new datechooser.beans.DateChooserCombo();
        calendarioDCons = new datechooser.beans.DateChooserCombo();
        jPanel20 = new javax.swing.JPanel();
        cmbOrden = new javax.swing.JComboBox();
        txtOrdenCarga = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        cmbImporteCons = new javax.swing.JComboBox();
        txtImporteCons = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        cmbTranspCons = new javax.swing.JComboBox();
        btnAgregarTranspC = new javax.swing.JButton();
        btnQuitarTranspC = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTransportista = new javax.swing.JTable();
        btnBuscarConsumo = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblConsumo = new javax.swing.JTable();
        btnSalir = new javax.swing.JButton();
        btnEliminarOrden = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Orden Carga Combustible");

        jPanel17.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel21.setText("Fecha");
        jPanel17.add(jLabel21);
        jLabel21.setBounds(10, 13, 40, 15);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setText("Hora");
        jPanel17.add(jLabel22);
        jLabel22.setBounds(200, 10, 50, 20);

        labelUsuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelUsuario.setText("Usuario");
        jPanel17.add(labelUsuario);
        labelUsuario.setBounds(760, 10, 50, 15);
        jPanel17.add(txtHoraRep);
        txtHoraRep.setBounds(230, 10, 80, 20);
        jPanel17.add(txtFechaRep);
        txtFechaRep.setBounds(50, 10, 80, 20);

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel17.add(jLabel24);
        jLabel24.setBounds(820, 0, 30, 30);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.white));
        jPanel1.setLayout(null);

        jLabel28.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel28.setText("Buscar Ordenes por");
        jPanel1.add(jLabel28);
        jLabel28.setBounds(20, 10, 180, 50);

        ckFechaCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckFechaCons.setText("Fecha");
        ckFechaCons.setFocusPainted(false);
        jPanel1.add(ckFechaCons);
        ckFechaCons.setBounds(220, 20, 80, 30);

        ckOrdenCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckOrdenCons.setText("Número Orden");
        ckOrdenCons.setFocusPainted(false);
        jPanel1.add(ckOrdenCons);
        ckOrdenCons.setBounds(350, 20, 130, 30);

        ckTranspCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckTranspCons.setText("Transportista");
        ckTranspCons.setFocusPainted(false);
        jPanel1.add(ckTranspCons);
        ckTranspCons.setBounds(500, 20, 120, 30);

        ckImporteCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckImporteCons.setText("Importe Total");
        ckImporteCons.setFocusPainted(false);
        jPanel1.add(ckImporteCons);
        ckImporteCons.setBounds(650, 20, 120, 30);

        btnAceptarTodosR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAceptarTodosR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarTodosRActionPerformed(evt);
            }
        });
        jPanel1.add(btnAceptarTodosR);
        btnAceptarTodosR.setBounds(800, 10, 35, 25);

        btnQuitarTodosR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnQuitarTodosR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarTodosRActionPerformed(evt);
            }
        });
        jPanel1.add(btnQuitarTodosR);
        btnQuitarTodosR.setBounds(800, 40, 35, 25);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel19.setLayout(null);

        jLabel26.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel26.setText("Desde");
        jPanel19.add(jLabel26);
        jLabel26.setBounds(10, 30, 60, 20);

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setText("Hasta");
        jPanel19.add(jLabel27);
        jLabel27.setBounds(170, 30, 60, 20);
        jPanel19.add(calendarioHCons);
        calendarioHCons.setBounds(210, 30, 90, 20);

        calendarioDCons.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    jPanel19.add(calendarioDCons);
    calendarioDCons.setBounds(50, 30, 90, 20);

    jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Número Orden", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    cmbOrden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "=", "<=" }));

    javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
    jPanel20.setLayout(jPanel20Layout);
    jPanel20Layout.setHorizontalGroup(
        jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
            .addContainerGap(32, Short.MAX_VALUE)
            .addComponent(cmbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(txtOrdenCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel20Layout.setVerticalGroup(
        jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtOrdenCarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Importe Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    cmbImporteCons.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "=", "<=" }));

    javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
    jPanel18.setLayout(jPanel18Layout);
    jPanel18Layout.setHorizontalGroup(
        jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel18Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(cmbImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(txtImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(24, Short.MAX_VALUE))
    );
    jPanel18Layout.setVerticalGroup(
        jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel18Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cmbImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transportista", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    btnAgregarTranspC.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    btnAgregarTranspC.setText(">");
    btnAgregarTranspC.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAgregarTranspCActionPerformed(evt);
        }
    });

    btnQuitarTranspC.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    btnQuitarTranspC.setText("<");
    btnQuitarTranspC.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnQuitarTranspCActionPerformed(evt);
        }
    });

    tblTransportista.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Transportista"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jScrollPane2.setViewportView(tblTransportista);

    javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
    jPanel21.setLayout(jPanel21Layout);
    jPanel21Layout.setHorizontalGroup(
        jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel21Layout.createSequentialGroup()
            .addGap(0, 10, Short.MAX_VALUE)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                    .addComponent(cmbTranspCons, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnAgregarTranspC))
                .addComponent(btnQuitarTranspC, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(25, 25, 25))
    );
    jPanel21Layout.setVerticalGroup(
        jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel21Layout.createSequentialGroup()
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel21Layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbTranspCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAgregarTranspC)))
                        .addGroup(jPanel21Layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(btnQuitarTranspC)))
                    .addGap(0, 19, Short.MAX_VALUE))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addContainerGap())
    );

    btnBuscarConsumo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnBuscarConsumo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
    btnBuscarConsumo.setText("Buscar");
    btnBuscarConsumo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBuscarConsumoActionPerformed(evt);
        }
    });

    jLabel25.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
    jLabel25.setText("Ordenes de Servicio");

    tblConsumo.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Fecha", "Orden N°", "Transportista", "Importe Total"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblConsumo.getTableHeader().setResizingAllowed(false);
    tblConsumo.getTableHeader().setReorderingAllowed(false);
    jScrollPane6.setViewportView(tblConsumo);

    btnSalir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
    btnSalir.setText("Salir");
    btnSalir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSalirActionPerformed(evt);
        }
    });

    btnEliminarOrden.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnEliminarOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
    btnEliminarOrden.setText("Eliminar");
    btnEliminarOrden.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnEliminarOrdenActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(2, 2, 2)
                            .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addGap(330, 330, 330)
                    .addComponent(btnEliminarOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(165, 165, 165)
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(366, 366, 366)
                    .addComponent(btnBuscarConsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(361, 361, 361)
                    .addComponent(jLabel25)))
            .addContainerGap())
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jSeparator9)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
            .addGap(22, 22, 22))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(1, 1, 1)
            .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnBuscarConsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(11, 11, 11)
            .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel25)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnEliminarOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(52, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarTodosRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodosRActionPerformed
        if (ckFechaCons.isSelected()) {
            calendarioDCons.setEnabled(true);
            calendarioHCons.setEnabled(true);
        }
        if (ckImporteCons.isSelected()) {
            cmbImporteCons.setEnabled(true);
            txtImporteCons.setEnabled(true);
        }
        if (ckOrdenCons.isSelected()) {
            cmbOrden.setEnabled(true);
            txtOrdenCarga.setEnabled(true);
        }
        if (ckTranspCons.isSelected()) {
            cmbTranspCons.setEnabled(true);
            btnAgregarTranspC.setEnabled(true);
            btnQuitarTranspC.setEnabled(true);
            tblTransportista.setEnabled(true);
        }
    }//GEN-LAST:event_btnAceptarTodosRActionPerformed

    private void btnQuitarTodosRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTodosRActionPerformed
        calendarioDCons.setEnabled(false);
        calendarioHCons.setEnabled(false);
        txtImporteCons.setEnabled(false);
        cmbImporteCons.setEnabled(false);
        cmbTranspCons.setEnabled(false);
        cmbOrden.setEnabled(false);
        ckFechaCons.setSelected(false);
        ckImporteCons.setSelected(false);
        ckOrdenCons.setSelected(false);
        ckTranspCons.setSelected(false);
        txtOrdenCarga.setEnabled(false);
        btnAgregarTranspC.setEnabled(false);
        btnQuitarTranspC.setEnabled(false);
    }//GEN-LAST:event_btnQuitarTodosRActionPerformed

    private void btnAgregarTranspCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTranspCActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTransportista.getModel();
        Object fila[] = {cmbTranspCons.getSelectedItem()};
        modelo.addRow(fila);
        tblTransportista.setModel(modelo);
    }//GEN-LAST:event_btnAgregarTranspCActionPerformed

    private void btnQuitarTranspCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTranspCActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTransportista.getModel();
        int fila = tblTransportista.getSelectedRow();
        modelo.removeRow(fila);
        tblTransportista.setModel(modelo);
    }//GEN-LAST:event_btnQuitarTranspCActionPerformed

    private void btnBuscarConsumoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarConsumoActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
        SimpleDateFormat sdfguion = new SimpleDateFormat("dd-MM-yyyy");
        Date fecha1 = sdf.parse(calendarioDCons.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHCons.getText(), new ParsePosition(0));
        DefaultTableModel modeloT = (DefaultTableModel) tblConsumo.getModel();


        if (fecha1.before(fecha3) || calendarioDCons.isEnabled() == false || fecha1.equals(fecha3)) {

            //Seleccion FECHA    
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled() == false) {
                String numeroOrden = txtOrdenCarga.getText();
                String importeTotal = txtImporteCons.getText();
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        //comparo el rango de fechas
                        if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (fecha2.after(fecha1)) && (fecha2.before(fecha3)) || fecha2.equals(fecha3) || fecha2.equals(fecha1)) {
                            //Guardo el objeto orden en la tabla
                            gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                    }
                }
            }
            //Seleccion NRO ORDEN
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled() == false) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int numero = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        //comparo el rango de fechas
                        if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (numero == Integer.parseInt(txtOrdenCarga.getText()))) {
                            //Guardo el objeto orden en la tabla
                            gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                    }
                }
            }
            //Seleccion TRANSPORTISTA
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int numero = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                            //Comparo que el importe para traer la orden correspondiente
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
            } //Cierre If Orden  

            //Seleccion IMPORTE
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() && tblTransportista.isEnabled() == false) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText()))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText()))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText()))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                    }//Cierre While Carga        
                } //Cierre While Orden
            }//Cierre If Numero Orden Orden

            //Seleccion FECHA Y NRO ORDEN
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled() == false) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        //comparo el rango de fechas
                        if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (Integer.parseInt(txtOrdenCarga.getText()) == nroOrden) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                            //Guardo el objeto orden en la tabla
                            gestorC.cargarTabla(tblConsumo, orden, carga);
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden

            //Seleccion FECHA, TRANSPORTISTA
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                            //Comparo que el importe para traer la orden correspondiente
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
            } //Cierre If Orden  

            //Seleccion FECHA E IMPORTE
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() && tblTransportista.isEnabled() == false) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden

            //Seleccion NRO ORDEN E IMPORTE
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() && tblTransportista.isEnabled() == false) {
                String numeroOrden = txtOrdenCarga.getText();
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden

            //Seleccion NRO ORDEN Y TRANSPORTISTA
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                            //Comparo que el importe para traer la orden correspondiente
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText()))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
            } //Cierre If Orden 

            //Seleccion IMPORTE Y TRANSPORTISTA
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador 
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden

            //Seleccion FECHA NRO ORDEN IMPORTE
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() && tblTransportista.isEnabled() == false) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            //Comparo que el importe para traer la orden correspondiente comparo el operador
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden

            //Seleccion FECHA NRO ORDEN TRANSPORTISTA
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() == false && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                            //Comparo que el importe para traer la orden correspondiente
                            if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                //Guardo el objeto orden en la tabla
                                gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
            } //Cierre If Orden 

            //Seleccion FECHA TRANSPORTISTA IMPORTE
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() == false && txtImporteCons.isEnabled() && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador 
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden 

            //Seleccion NRO ORDEN TRANSPORTISTA IMPORTE
            if (calendarioDCons.isEnabled() == false && calendarioHCons.isEnabled() == false && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText()))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText()))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador 
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText()))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden 

            //Seleccion FECHA ORDEN TRANSPORTISTA IMPORTE
            if (calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && txtOrdenCarga.isEnabled() && txtImporteCons.isEnabled() && tblTransportista.isEnabled()) {
                Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
                while (ite.hasNext()) {
                    OrdenServicio orden = (OrdenServicio) ite.next();
                    int nroOrden = orden.getNumeroOrden();
                    int bandera = gestorC.buscarObjeto(tblConsumo, orden);
                    Date fecha2 = null;
                    try {
                        fecha2 = sdfguion.parse(orden.getFecha());
                        System.out.println(fecha2);
                    } catch (ParseException ex) {
                        Logger.getLogger(frmConsultaConsumo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
                    //Busco el objeto carga para traer el importe de la orden
                    while (ite2.hasNext()) {
                        CargaCombustible carga = (CargaCombustible) ite2.next();
                        if (cmbImporteCons.getSelectedItem() == ">=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        }
                        if (cmbImporteCons.getSelectedItem() == "<=") {
                            for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                                //Comparo que el importe para traer la orden correspondiente comparo el operador 
                                if ((bandera == 0) && (carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenCarga.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                                    //Guardo el objeto orden en la tabla
                                    gestorC.cargarTabla(tblConsumo, orden, carga);
                                }
                            }
                        } //Cierre If carga
                    }//Cierre While Carga
                }//Cierre while orden        
            }//Cierre if orden         

        } else {
            JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");
        }
    }//GEN-LAST:event_btnBuscarConsumoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea salir?");
        if (respuesta == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEliminarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarOrdenActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblConsumo.getModel();
        int fila = tblConsumo.getSelectedRow();
        int nroOrden = Integer.parseInt(tblConsumo.getValueAt(fila, 1).toString());
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea eliminar la orden Nro: " + nroOrden);
        if (respuesta == 0) {
            Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
            while (ite.hasNext()) {
                OrdenServicio orden = (OrdenServicio) ite.next();
                if (orden.getNumeroOrden() == nroOrden) {
                    orden.setHabilita("0");
                    gestorH.actualizarObjeto(orden);
                }
            }
            JOptionPane.showMessageDialog(null, "Se ha eliminado la orden Nro: " + nroOrden);
            gestorBitacora gestorB = new gestorBitacora();
            gestorB.cargarBitacora(String.valueOf(nroOrden), txtFechaRep.getText(), 10, labelUsuario.getText(),"");
        }
    }//GEN-LAST:event_btnEliminarOrdenActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarTodosR;
    private javax.swing.JButton btnAgregarTranspC;
    private javax.swing.JButton btnBuscarConsumo;
    private javax.swing.JButton btnEliminarOrden;
    private javax.swing.JButton btnQuitarTodosR;
    private javax.swing.JButton btnQuitarTranspC;
    private javax.swing.JButton btnSalir;
    private datechooser.beans.DateChooserCombo calendarioDCons;
    private datechooser.beans.DateChooserCombo calendarioHCons;
    private javax.swing.JCheckBox ckFechaCons;
    private javax.swing.JCheckBox ckImporteCons;
    private javax.swing.JCheckBox ckOrdenCons;
    private javax.swing.JCheckBox ckTranspCons;
    private javax.swing.JComboBox cmbImporteCons;
    private javax.swing.JComboBox cmbOrden;
    private javax.swing.JComboBox cmbTranspCons;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JTable tblConsumo;
    private javax.swing.JTable tblTransportista;
    private javax.swing.JTextField txtFechaRep;
    private javax.swing.JTextField txtHoraRep;
    private javax.swing.JTextField txtImporteCons;
    private javax.swing.JTextField txtOrdenCarga;
    // End of variables declaration//GEN-END:variables
}
