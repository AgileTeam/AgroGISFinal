/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas_Transporte;

import Clases_Modulo_Transporte.CargaCombustible;
import Clases_Modulo_Transporte.OrdenServicio;
import Clases_Modulo_Transporte.Vehiculo;
import Gestores_Vista.gestorConsultarConsumo;
import Gestores_Vista.gestorFecha;
import Hibernate.GestorHibernate;
import java.awt.*;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carolina
 */
public class frmConsultaConsumo extends javax.swing.JInternalFrame {
GestorHibernate gestorH = new GestorHibernate();
gestorConsultarConsumo gestorC = new gestorConsultarConsumo();
    /**
     * Creates new form frmConsultaConsumo
     */
    public frmConsultaConsumo() {
        initComponents();
        gestorH.actualizarUsuario(labelusuario);

        txtHoraCons.setEnabled(false);
        txtHoraCons.setEditable(false);
        txtFechaCons.setEditable(false);
        txtFechaCons.setEnabled(false);
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFechaCons.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHoraCons.setText(formateadorHora.format(calendario.getTime()));

        
        //redimensionar columnas de la tabla Consumo
        tblConsumo.getColumnModel().getColumn(0).setPreferredWidth(20);
        tblConsumo.getColumnModel().getColumn(1).setPreferredWidth(20);
        tblConsumo.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblConsumo.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblConsumo.getColumnModel().getColumn(4).setPreferredWidth(60);
        
        
        
        //Las siguientes lineas son para dar a la pantalla el tamaño requerido y luego centrarla en la pantalla.
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 985;
        int alto = 635;
        int posX = (int) ((tamanioPantalla.width - ancho) / 2);
//        int posY = (int) ((tamanioPantalla.height - alto) / 2);
        this.setSize(ancho, alto);
        this.setLocation(posX, 0);
        
        calendarioDCons.setEnabled(false);
        calendarioHCons.setEnabled(false);
        txtImporteCons.setEnabled(false);
        txtOrdenCons.setEnabled(false);
        btnAgregarTranspC.setEnabled(false);
        btnQuitarTranspC.setEnabled(false);
        cmbOperacion.setEnabled(false);
        
        lstTransportista.setModel(new DefaultListModel());
        
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelusuario = new javax.swing.JLabel();
        txtHoraCons = new javax.swing.JTextField();
        txtFechaCons = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        txtOrdenCons = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cmbImporteCons = new javax.swing.JComboBox();
        txtImporteCons = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        cmbTranspCons = new javax.swing.JComboBox();
        btnAgregarTranspC = new javax.swing.JButton();
        btnQuitarTranspC = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstTransportista = new javax.swing.JList();
        jPanel9 = new javax.swing.JPanel();
        cmbOperacion = new javax.swing.JComboBox();
        btnBuscarConsumo = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblConsumo = new javax.swing.JTable();
        btnVerOrden = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        calendarioHCons = new datechooser.beans.DateChooserCombo();
        calendarioDCons = new datechooser.beans.DateChooserCombo();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        ckFechaCons = new javax.swing.JCheckBox();
        ckOrdenCons = new javax.swing.JCheckBox();
        ckTranspCons = new javax.swing.JCheckBox();
        ckImporteCons = new javax.swing.JCheckBox();
        ckOperacion = new javax.swing.JCheckBox();
        btnAceptarTodos = new javax.swing.JButton();
        btnQuitarTodos = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Detalle");

        jPanel3.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Fecha");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(10, 13, 40, 15);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Hora");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(200, 10, 50, 20);

        labelusuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelusuario.setText("Usuario");
        jPanel3.add(labelusuario);
        labelusuario.setBounds(750, 10, 50, 15);
        jPanel3.add(txtHoraCons);
        txtHoraCons.setBounds(230, 10, 80, 20);
        jPanel3.add(txtFechaCons);
        txtFechaCons.setBounds(50, 10, 80, 20);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel3.add(jLabel9);
        jLabel9.setBounds(800, 0, 30, 30);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Numero Orden", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Nº");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtOrdenCons, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrdenCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Importe Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImporteCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transportista", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        cmbTranspCons.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        btnAgregarTranspC.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAgregarTranspC.setText(">");
        btnAgregarTranspC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTranspCActionPerformed(evt);
            }
        });

        btnQuitarTranspC.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnQuitarTranspC.setText("<");
        btnQuitarTranspC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarTranspCActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(lstTransportista);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbTranspCons, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnQuitarTranspC)
                    .addComponent(btnAgregarTranspC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbTranspCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregarTranspC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuitarTranspC)))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operacion", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        cmbOperacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Carga de Combustible", "Compra de Insumos" }));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(cmbOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        btnBuscarConsumo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnBuscarConsumo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscarConsumo.setText("Buscar");
        btnBuscarConsumo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarConsumoActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setText("Detalle de Consumo");

        tblConsumo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Orden N°", "Transportista", "Operación", "Importe Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConsumo.getTableHeader().setResizingAllowed(false);
        tblConsumo.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblConsumo);

        btnVerOrden.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnVerOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IrDetalle.png"))); // NOI18N
        btnVerOrden.setText("Ver Orden");

        btnSalir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel6.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Desde");
        jPanel6.add(jLabel4);
        jLabel4.setBounds(10, 30, 60, 20);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Hasta");
        jPanel6.add(jLabel5);
        jLabel5.setBounds(170, 30, 60, 20);
        jPanel6.add(calendarioHCons);
        calendarioHCons.setBounds(210, 30, 90, 20);
        jPanel6.add(calendarioDCons);
        calendarioDCons.setBounds(50, 30, 90, 20);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.white));
        jPanel1.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Buscar Ordenes por");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(10, 10, 142, 50);

        ckFechaCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckFechaCons.setText("Fecha");
        ckFechaCons.setFocusPainted(false);
        jPanel1.add(ckFechaCons);
        ckFechaCons.setBounds(190, 20, 59, 30);

        ckOrdenCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckOrdenCons.setText("Número Orden");
        ckOrdenCons.setFocusPainted(false);
        jPanel1.add(ckOrdenCons);
        ckOrdenCons.setBounds(300, 20, 107, 30);

        ckTranspCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckTranspCons.setText("Transportista");
        ckTranspCons.setFocusPainted(false);
        jPanel1.add(ckTranspCons);
        ckTranspCons.setBounds(440, 20, 98, 30);

        ckImporteCons.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckImporteCons.setText("Importe Total");
        ckImporteCons.setFocusPainted(false);
        jPanel1.add(ckImporteCons);
        ckImporteCons.setBounds(570, 20, 97, 30);

        ckOperacion.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckOperacion.setText("Operación");
        ckOperacion.setFocusPainted(false);
        jPanel1.add(ckOperacion);
        ckOperacion.setBounds(700, 20, 82, 30);

        btnAceptarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAceptarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarTodosActionPerformed(evt);
            }
        });
        jPanel1.add(btnAceptarTodos);
        btnAceptarTodos.setBounds(830, 10, 35, 25);

        btnQuitarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnQuitarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarTodosActionPerformed(evt);
            }
        });
        jPanel1.add(btnQuitarTodos);
        btnQuitarTodos.setBounds(830, 40, 35, 25);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(397, 397, 397)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnBuscarConsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(380, 380, 380)
                        .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscarConsumo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarTranspCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTranspCActionPerformed
        DefaultListModel modelo = (DefaultListModel) lstTransportista.getModel();
        modelo.addElement(cmbTranspCons.getSelectedItem());
    }//GEN-LAST:event_btnAgregarTranspCActionPerformed

    private void btnQuitarTranspCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTranspCActionPerformed
        DefaultListModel modelo = (DefaultListModel) lstTransportista.getModel();
        modelo.remove(lstTransportista.getSelectedIndex());
    }//GEN-LAST:event_btnQuitarTranspCActionPerformed

    private void btnAceptarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodosActionPerformed
        if (ckFechaCons.isSelected()) {
            calendarioDCons.setEnabled(true);
            calendarioHCons.setEnabled(true);
        }
        if (ckImporteCons.isSelected()) {
            txtImporteCons.setEnabled(true);
        }
        if (ckOperacion.isSelected()) {
            cmbOperacion.setEnabled(true);
        }
        if (ckOrdenCons.isSelected()) {
            txtOrdenCons.setEnabled(true);
        }
        if (ckTranspCons.isSelected()) {
            btnAgregarTranspC.setEnabled(true);
            btnQuitarTranspC.setEnabled(true);
        }

    }//GEN-LAST:event_btnAceptarTodosActionPerformed

    private void btnQuitarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTodosActionPerformed
        calendarioDCons.setEnabled(false);
        calendarioHCons.setEnabled(false);
        txtImporteCons.setEnabled(false);
        txtOrdenCons.setEnabled(false);
        btnAgregarTranspC.setEnabled(false);
        btnQuitarTranspC.setEnabled(false);
        cmbOperacion.setEnabled(false);
    }//GEN-LAST:event_btnQuitarTodosActionPerformed

    private void btnBuscarConsumoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarConsumoActionPerformed
        String numeroOrden = null;
        String importeTotal = null;
        String tipoOperacion = null;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date fecha1 = sdf.parse(calendarioDCons.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHCons.getText(), new ParsePosition(0));
        numeroOrden = txtOrdenCons.getText();
        importeTotal = txtImporteCons.getText();
        tipoOperacion = cmbOperacion.getSelectedItem().toString();
        DefaultTableModel modeloT = (DefaultTableModel) tblConsumo.getModel();
        DefaultTableModel modeloLista = (DefaultTableModel) lstTransportista.getModel();
         
        if(fecha1.before(fecha3)){
             
         //Seleccion de FECHA
         if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden==null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()== 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
             }
         }        
        }
        //Seleccion de NUMERO DE ORDEN
         if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden!=null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()== 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (numero == Integer.parseInt(txtOrdenCons.getText()))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
             }
         }        
        }
        //Seleccion de IMPORTE TOTAL
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden==null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()== 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText()))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText()))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
         
        //Seleccion de TRANSPORTISTA
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden==null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
        
        //Seleccion de TIPO DE OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden==null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoServicio= orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (tipoServicio.equalsIgnoreCase(tipoOperacion))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion Fecha y Numero de Orden
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden!=null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (fecha2.after(fecha1)) && (fecha2.before(fecha3)) && (Integer.parseInt(numeroOrden) == nroOrden)) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion FECHA e IMPORTE
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden == null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion de FECHA y TRANSPORTISTAS
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden==null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
        
        //seleccion de FECHA Y TIPO DE OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden==null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoServicio= orden.getTipoServicio().toString();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (tipoServicio.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //seleccion NRO ORDEN E IMPORTE
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden != null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion de NRO DE ORDEN y TRANSPORTISTAS
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden!=null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
        
        //Seleccion NRO ORDEN Y TIPO DE OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden!=null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoServicio= orden.getTipoServicio().toString();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (tipoServicio.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion IMPORTE y TRANSPORTISTAS
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden == null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
         //Seleccion IMPORTE Y TIPO OPERACION
         if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden == null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion de TRANSPORTISTAS Y TIPO DE OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden==null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
        
        //Seleccion FECHA, NRO ORDEN E IMPORTE
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden != null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion FECHA, NRO ORDEN, TRANSPORTISTA
         if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden!=null && importeTotal==null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
        
         //Seleccion FECHA, NRO ORDEN Y TIPO DE OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden!=null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoServicio= orden.getTipoServicio().toString();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (tipoServicio.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblConsumo, orden, carga);
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
         
        //Seleccion FECHA, IMPORTE Y TRANSPORTISTA
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden == null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
       
        //Seleccion FECHA IMPORTE TIPO OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden == null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion))&& (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion FECHA, TRANSPORTISTA, TIPO OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden==null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
        
        //Seleccion NRO ORDEN, IMPORTE, TRANSPORTISTA
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden != null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
        
        //Seleccion NRO ORDEN, IMPORTE, TIPO OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden != null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion))&& (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion NRO ORDEN, TRANSPORTISTA, TIPO OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden!=null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
        
        // Seleccion IMPORTE, TRANSPORTISTA, TIPO OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden == null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
        
        //Seleccion FECHA, NRO ORDEN, IMPORTE, TRANSPORTISTA
        
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden != null && importeTotal!=null && tipoOperacion == null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) &&(fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
        
        //Seleccion FECHA, NRO ORDEN, IMPORTE, TIPO OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden != null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))&& (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                     }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion))&& (nroOrden == Integer.parseInt(numeroOrden))&& (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion FECHA, IMPORTE, TRANSPORTISTA, TIPO OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden == null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
        
        //Seleccion FECHA, NRO ORDEN, TRANSPORTISTA, TIPO OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden!=null && importeTotal==null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblConsumo, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
        
        //Seleccion NRO ORDEN, IMPORTE, TRANSPORTISTA, TIPO OPERACION
        if(calendarioDCons.isEnabled()==false && calendarioHCons.isEnabled()==false && numeroOrden != null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
        
        //Seleccion NRO ORDEN, IMPORTE, TRANSPORTISTA, FECHA, TIPO OPERACION
        if(calendarioDCons.isEnabled() && calendarioHCons.isEnabled() && numeroOrden != null && importeTotal!=null && tipoOperacion != null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             String tipoOp = orden.getTipoServicio().toString();
             int bandera = gestorC.buscarObjeto(tblConsumo, orden);
             Iterator ite2 = gestorH.listarClase(CargaCombustible.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  CargaCombustible carga = (CargaCombustible) ite2.next();
                  if (cmbImporteCons.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteCons.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden))&& (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteCons.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteCons.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (tipoOp.equalsIgnoreCase(tipoOperacion)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblConsumo, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
        
        }else{
        JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");
        }
        
       
    }//GEN-LAST:event_btnBuscarConsumoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea salir?");
        if (respuesta == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarTodos;
    private javax.swing.JButton btnAgregarTranspC;
    private javax.swing.JButton btnBuscarConsumo;
    private javax.swing.JButton btnQuitarTodos;
    private javax.swing.JButton btnQuitarTranspC;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVerOrden;
    private datechooser.beans.DateChooserCombo calendarioDCons;
    private datechooser.beans.DateChooserCombo calendarioHCons;
    private javax.swing.JCheckBox ckFechaCons;
    private javax.swing.JCheckBox ckImporteCons;
    private javax.swing.JCheckBox ckOperacion;
    private javax.swing.JCheckBox ckOrdenCons;
    private javax.swing.JCheckBox ckTranspCons;
    private javax.swing.JComboBox cmbImporteCons;
    private javax.swing.JComboBox cmbOperacion;
    private javax.swing.JComboBox cmbTranspCons;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelusuario;
    private javax.swing.JList lstTransportista;
    private javax.swing.JTable tblConsumo;
    private javax.swing.JTextField txtFechaCons;
    private javax.swing.JTextField txtHoraCons;
    private javax.swing.JTextField txtImporteCons;
    private javax.swing.JTextField txtOrdenCons;
    // End of variables declaration//GEN-END:variables
}
