/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas_Transporte;

import javax.swing.*;
import Clases_Modulo_Transporte.CargaCombustible;
import Clases_Modulo_Transporte.EnvioTaller;
import Clases_Modulo_Transporte.OrdenServicio;
import Clases_Modulo_Transporte.Vehiculo;
import Gestores_Vista.gestorConsultaReparaciones;
import Gestores_Vista.gestorFecha;
import Hibernate.GestorHibernate;
import java.awt.*;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Carolina
 */
public class frmConsultaReparaciones extends javax.swing.JInternalFrame {
GestorHibernate gestorH = new GestorHibernate();
gestorConsultaReparaciones gestorC = new gestorConsultaReparaciones();
    /**
     * Creates new form frmConsultaReparaciones
     */
    public frmConsultaReparaciones() {
        initComponents();
        
        txtHoraRep.setEnabled(false);
        txtHoraRep.setEditable(false);
        txtFechaRep.setEditable(false);
        txtFechaRep.setEnabled(false);
        
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFechaRep.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHoraRep.setText(formateadorHora.format(calendario.getTime()));

        
        //redimensionar columnas de la tabla Consumo
        tblReparacion.getColumnModel().getColumn(0).setPreferredWidth(20);
        tblReparacion.getColumnModel().getColumn(1).setPreferredWidth(20);
        tblReparacion.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblReparacion.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblReparacion.getColumnModel().getColumn(4).setPreferredWidth(60);
        
        
        
        //Las siguientes lineas son para dar a la pantalla el tamaño requerido y luego centrarla en la pantalla.
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 985;
        int alto = 635;
        int posX = (int) ((tamanioPantalla.width - ancho) / 2);
//        int posY = (int) ((tamanioPantalla.height - alto) / 2);
        this.setSize(ancho, alto);
        this.setLocation(posX, 0);
        
        calendarioDRep.setEnabled(false);
        calendarioHRep.setEnabled(false);
        txtImporteRep.setEnabled(false);
        txtOrdenRep.setEnabled(false);
        btnAgregarTranspR.setEnabled(false);
        btnQuitarTranspR.setEnabled(false);
        lstTransportista.setModel(new DefaultListModel());
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel17 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtHoraRep = new javax.swing.JTextField();
        txtFechaRep = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel28 = new javax.swing.JLabel();
        ckFechaRep = new javax.swing.JCheckBox();
        ckOrdenRep = new javax.swing.JCheckBox();
        ckTranspRep = new javax.swing.JCheckBox();
        ckImporteRep = new javax.swing.JCheckBox();
        jSeparator8 = new javax.swing.JSeparator();
        jPanel19 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        calendarioHRep = new datechooser.beans.DateChooserCombo();
        calendarioDRep = new datechooser.beans.DateChooserCombo();
        jPanel20 = new javax.swing.JPanel();
        txtOrdenRep = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        cmbImporteRep = new javax.swing.JComboBox();
        txtImporteRep = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        cmbTranspRep = new javax.swing.JComboBox();
        btnAgregarTranspR = new javax.swing.JButton();
        btnQuitarTranspR = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTransportista = new javax.swing.JList();
        btnBuscarReparacion = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblReparacion = new javax.swing.JTable();
        btnVerOrden = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnAceptarTodosR = new javax.swing.JButton();
        btnQuitarTodosR = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reparaciones");
        setPreferredSize(new java.awt.Dimension(993, 668));

        jPanel17.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel21.setText("Fecha");
        jPanel17.add(jLabel21);
        jLabel21.setBounds(10, 13, 40, 15);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setText("Hora");
        jPanel17.add(jLabel22);
        jLabel22.setBounds(200, 10, 50, 20);

        jLabel23.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel23.setText("Usuario");
        jPanel17.add(jLabel23);
        jLabel23.setBounds(740, 10, 50, 15);
        jPanel17.add(txtHoraRep);
        txtHoraRep.setBounds(230, 10, 80, 20);
        jPanel17.add(txtFechaRep);
        txtFechaRep.setBounds(50, 10, 80, 20);

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel17.add(jLabel24);
        jLabel24.setBounds(790, 0, 30, 30);

        jLabel28.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel28.setText("Buscar Ordenes por");

        ckFechaRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckFechaRep.setText("Fecha");

        ckOrdenRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckOrdenRep.setText("Número Orden");

        ckTranspRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckTranspRep.setText("Transportista");

        ckImporteRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ckImporteRep.setText("Importe Total");

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel19.setLayout(null);

        jLabel26.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel26.setText("Desde");
        jPanel19.add(jLabel26);
        jLabel26.setBounds(10, 30, 60, 20);

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setText("Hasta");
        jPanel19.add(jLabel27);
        jLabel27.setBounds(170, 30, 60, 20);
        jPanel19.add(calendarioHRep);
        calendarioHRep.setBounds(210, 30, 90, 20);
        jPanel19.add(calendarioDRep);
        calendarioDRep.setBounds(50, 30, 90, 20);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Numero Orden", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(txtOrdenRep, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtOrdenRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Importe Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transportista", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        cmbTranspRep.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        btnAgregarTranspR.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAgregarTranspR.setText(">");
        btnAgregarTranspR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTranspRActionPerformed(evt);
            }
        });

        btnQuitarTranspR.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnQuitarTranspR.setText("<");
        btnQuitarTranspR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarTranspRActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstTransportista);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                        .addComponent(cmbTranspRep, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarTranspR))
                    .addComponent(btnQuitarTranspR, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btnQuitarTranspR))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbTranspRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAgregarTranspR))
                                .addGap(62, 62, 62)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnBuscarReparacion.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnBuscarReparacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscarReparacion.setText("Buscar");
        btnBuscarReparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarReparacionActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel25.setText("Detalle de Reparaciones");

        tblReparacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Orden N°", "Transportista", "Importe Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblReparacion.getTableHeader().setResizingAllowed(false);
        tblReparacion.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tblReparacion);

        btnVerOrden.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnVerOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IrDetalle.png"))); // NOI18N
        btnVerOrden.setText("Ver Orden");

        btnSalir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnAceptarTodosR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAceptarTodosR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarTodosRActionPerformed(evt);
            }
        });

        btnQuitarTodosR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnQuitarTodosR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarTodosRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(207, 207, 207)
                                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jLabel28)
                                                .addGap(75, 75, 75)
                                                .addComponent(ckFechaRep, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(47, 47, 47)
                                                .addComponent(ckOrdenRep)
                                                .addGap(61, 61, 61)
                                                .addComponent(ckTranspRep, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(ckImporteRep))
                                            .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAceptarTodosR, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnQuitarTodosR, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(431, 431, 431)
                                        .addComponent(btnBuscarReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel25)
                .addGap(402, 402, 402))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(ckFechaRep)
                            .addComponent(ckOrdenRep)
                            .addComponent(ckTranspRep)
                            .addComponent(ckImporteRep)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAceptarTodosR, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuitarTodosR, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(175, 175, 175))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea salir?");
        if (respuesta == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarTranspRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTranspRActionPerformed
        DefaultListModel modelo = (DefaultListModel) lstTransportista.getModel();
        modelo.addElement(cmbTranspRep.getSelectedItem());
    }//GEN-LAST:event_btnAgregarTranspRActionPerformed

    private void btnQuitarTranspRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTranspRActionPerformed
        DefaultListModel modelo = (DefaultListModel) lstTransportista.getModel();
        modelo.remove(lstTransportista.getSelectedIndex());
    }//GEN-LAST:event_btnQuitarTranspRActionPerformed

    private void btnAceptarTodosRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodosRActionPerformed
        if (ckFechaRep.isSelected()) {
            calendarioDRep.setEnabled(true);
            calendarioHRep.setEnabled(true);
        }
        if (ckImporteRep.isSelected()) {
            txtImporteRep.setEnabled(true);
        }
        if (ckOrdenRep.isSelected()) {
            txtOrdenRep.setEnabled(true);
        }
        if (ckTranspRep.isSelected()) {
            btnAgregarTranspR.setEnabled(true);
            btnQuitarTranspR.setEnabled(true);
        }
    }//GEN-LAST:event_btnAceptarTodosRActionPerformed

    private void btnQuitarTodosRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTodosRActionPerformed
        calendarioDRep.setEnabled(false);
        calendarioHRep.setEnabled(false);
        txtImporteRep.setEnabled(false);
        txtOrdenRep.setEnabled(false);
        btnAgregarTranspR.setEnabled(false);
        btnQuitarTranspR.setEnabled(false);
    }//GEN-LAST:event_btnQuitarTodosRActionPerformed

    private void btnBuscarReparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarReparacionActionPerformed
        String numeroOrden = null;
        String importeTotal = null;        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date fecha1 = sdf.parse(calendarioDRep.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHRep.getText(), new ParsePosition(0));
        numeroOrden = txtOrdenRep.getText();
        importeTotal = txtImporteRep.getText();
        DefaultTableModel modeloT = (DefaultTableModel) tblReparacion.getModel();
        DefaultTableModel modeloLista = (DefaultTableModel) lstTransportista.getModel();
        
         if(fecha1.before(fecha3)){
             
         //Seleccion FECHA    
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden==null && importeTotal==null && modeloLista.getRowCount()== 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
             }
         }        
        }
         //Seleccion NRO ORDEN
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden!=null && importeTotal==null && modeloLista.getRowCount()== 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (numero == Integer.parseInt(txtOrdenRep.getText()))) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
             }
         }        
        }
         //Seleccion TRANSPORTISTA
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden==null && importeTotal==null && modeloLista.getRowCount()!= 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         //Seleccion IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden==null && importeTotal!=null && modeloLista.getRowCount()== 0){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                     }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText()))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText()))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
         
         //Seleccion FECHA Y NRO ORDEN
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden!=null && importeTotal==null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (fecha2.after(fecha1)) && (fecha2.before(fecha3)) && (Integer.parseInt(numeroOrden) == nroOrden)) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblReparacion, orden, carga);
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
         
         //Seleccion FECHA, TRANSPORTISTA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden==null && importeTotal==null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         //Seleccion FECHA E IMPORTE
          if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden == null && importeTotal!=null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                     }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
         
         //Seleccion NRO ORDEN E IMPORTE
          if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden != null && importeTotal!=null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                     }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
          
          //Seleccion NRO ORDEN Y TRANSPORTISTA
        if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden!=null && importeTotal==null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
          
        //Seleccion IMPORTE Y TRANSPORTISTA
        if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden == null && importeTotal!=null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion FECHA NRO ORDEN IMPORTE
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden != null && importeTotal!=null && modeloLista.getRowCount()== 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                     }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        //Seleccion FECHA NRO ORDEN TRANSPORTISTA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden!=null && importeTotal==null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
             
         //Seleccion FECHA TRANSPORTISTA IMPORTE
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden == null && importeTotal!=null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
         
         //Seleccion NRO ORDEN TRANSPORTISTA IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && numeroOrden != null && importeTotal!=null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
         
        //Seleccion FECHA ORDEN TRANSPORTISTA IMPORTE
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && numeroOrden != null && importeTotal!=null && modeloLista.getRowCount()!= 0){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) &&(fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                      for (int i = 0; i < lstTransportista.getModel().getSize(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == lstTransportista.getModel().getElementAt(i)) && (nroOrden == Integer.parseInt(numeroOrden)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
         
         
         
         }else {
         JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");
         }
 
    }//GEN-LAST:event_btnBuscarReparacionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarTodosR;
    private javax.swing.JButton btnAgregarTranspR;
    private javax.swing.JButton btnBuscarReparacion;
    private javax.swing.JButton btnQuitarTodosR;
    private javax.swing.JButton btnQuitarTranspR;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVerOrden;
    private datechooser.beans.DateChooserCombo calendarioDRep;
    private datechooser.beans.DateChooserCombo calendarioHRep;
    private javax.swing.JCheckBox ckFechaRep;
    private javax.swing.JCheckBox ckImporteRep;
    private javax.swing.JCheckBox ckOrdenRep;
    private javax.swing.JCheckBox ckTranspRep;
    private javax.swing.JComboBox cmbImporteRep;
    private javax.swing.JComboBox cmbTranspRep;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JList lstTransportista;
    private javax.swing.JTable tblReparacion;
    private javax.swing.JTextField txtFechaRep;
    private javax.swing.JTextField txtHoraRep;
    private javax.swing.JTextField txtImporteRep;
    private javax.swing.JTextField txtOrdenRep;
    // End of variables declaration//GEN-END:variables
}
