/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas_Transporte;

import Clases_Modulo_Cliente.Productor;
import javax.swing.*;
import Clases_Modulo_Transporte.CargaCombustible;
import Clases_Modulo_Transporte.EnvioTaller;
import Clases_Modulo_Transporte.OrdenServicio;
import Clases_Modulo_Transporte.Vehiculo;
import Gestores_Vista.gestorConsultaReparaciones;
import Gestores_Vista.gestorFecha;
import Hibernate.GestorHibernate;
import ireport.GestorDeReportes;
import java.awt.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Carolina
 */
public class frmConsultaReparaciones extends javax.swing.JInternalFrame {
GestorHibernate gestorH = new GestorHibernate();
gestorConsultaReparaciones gestorC = new gestorConsultaReparaciones();
    /**
     * Creates new form frmConsultaReparaciones
     */
    public frmConsultaReparaciones() {
        initComponents();
        gestorH.actualizarUsuario(labelUsuario);
        txtHoraRep.setEnabled(false);
        txtHoraRep.setEditable(false);
        txtFechaRep.setEditable(false);
        txtFechaRep.setEnabled(false);
        
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFechaRep.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHoraRep.setText(formateadorHora.format(calendario.getTime()));

        
        //redimensionar columnas de la tabla Consumo
        tblReparacion.getColumnModel().getColumn(0).setPreferredWidth(20);
        tblReparacion.getColumnModel().getColumn(1).setPreferredWidth(20);
        tblReparacion.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblReparacion.getColumnModel().getColumn(3).setPreferredWidth(100);
        tblReparacion.getColumnModel().getColumn(4).setPreferredWidth(80);
        
        
        
        //Las siguientes lineas son para dar a la pantalla el tama√±o requerido y luego centrarla en la pantalla.
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 990;
        int alto = 635;
        int posX = (int) ((tamanioPantalla.width - ancho) / 2);
//        int posY = (int) ((tamanioPantalla.height - alto) / 2);
        this.setSize(ancho, alto);
        this.setLocation(posX, 0);
        
        calendarioDRep.setEnabled(false);
        calendarioHRep.setEnabled(false);
        txtImporteRep.setEnabled(false);
        txtOrdenRep.setEnabled(false);
        btnAgregarTranspR.setEnabled(false);
        btnQuitarTranspR.setEnabled(false);
        cmbTranspRep.setModel(gestorC.rellenaComboTransportista());
        cmbMotivo.setModel(gestorC.rellenaComboMotivo());
        tblTransportista.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel17 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        labelUsuario = new javax.swing.JLabel();
        txtHoraRep = new javax.swing.JTextField();
        txtFechaRep = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        calendarioHRep = new datechooser.beans.DateChooserCombo();
        calendarioDRep = new datechooser.beans.DateChooserCombo();
        jPanel20 = new javax.swing.JPanel();
        txtOrdenRep = new javax.swing.JTextField();
        cmbOrden = new javax.swing.JComboBox();
        jPanel18 = new javax.swing.JPanel();
        cmbImporteRep = new javax.swing.JComboBox();
        txtImporteRep = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        cmbTranspRep = new javax.swing.JComboBox();
        btnAgregarTranspR = new javax.swing.JButton();
        btnQuitarTranspR = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTransportista = new javax.swing.JTable();
        btnBuscarReparacion = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblReparacion = new javax.swing.JTable();
        btnVerOrden = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        ckFechaRep = new javax.swing.JCheckBox();
        ckOrdenRep = new javax.swing.JCheckBox();
        ckTranspRep = new javax.swing.JCheckBox();
        ckMotivo = new javax.swing.JCheckBox();
        btnAceptarTodosR = new javax.swing.JButton();
        btnQuitarTodosR = new javax.swing.JButton();
        ckImporteRep = new javax.swing.JCheckBox();
        btnEliminar = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        cmbMotivo = new javax.swing.JComboBox();
        btnAgregarMotivo = new javax.swing.JButton();
        btnQuitarMotivo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMotivo = new javax.swing.JTable();
        btnImprimir = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Detalle de Reparaciones");
        setPreferredSize(new java.awt.Dimension(993, 668));

        jPanel17.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel21.setText("Fecha");
        jPanel17.add(jLabel21);
        jLabel21.setBounds(10, 13, 40, 15);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setText("Hora");
        jPanel17.add(jLabel22);
        jLabel22.setBounds(200, 10, 50, 20);

        labelUsuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelUsuario.setText("Usuario");
        jPanel17.add(labelUsuario);
        labelUsuario.setBounds(760, 10, 50, 15);
        jPanel17.add(txtHoraRep);
        txtHoraRep.setBounds(230, 10, 80, 20);
        jPanel17.add(txtFechaRep);
        txtFechaRep.setBounds(50, 10, 80, 20);

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel17.add(jLabel24);
        jLabel24.setBounds(820, 0, 30, 30);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel19.setLayout(null);

        jLabel26.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel26.setText("Desde");
        jPanel19.add(jLabel26);
        jLabel26.setBounds(10, 30, 60, 20);

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setText("Hasta");
        jPanel19.add(jLabel27);
        jLabel27.setBounds(170, 30, 60, 20);
        jPanel19.add(calendarioHRep);
        calendarioHRep.setBounds(210, 30, 90, 20);

        calendarioDRep.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    jPanel19.add(calendarioDRep);
    calendarioDRep.setBounds(50, 30, 90, 20);

    jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "N√∫mero Orden", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    cmbOrden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "=", "<=" }));

    javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
    jPanel20.setLayout(jPanel20Layout);
    jPanel20Layout.setHorizontalGroup(
        jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
            .addContainerGap(32, Short.MAX_VALUE)
            .addComponent(cmbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(txtOrdenRep, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel20Layout.setVerticalGroup(
        jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtOrdenRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Importe Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    cmbImporteRep.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "=", "<=" }));

    javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
    jPanel18.setLayout(jPanel18Layout);
    jPanel18Layout.setHorizontalGroup(
        jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel18Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(cmbImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(txtImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(24, Short.MAX_VALUE))
    );
    jPanel18Layout.setVerticalGroup(
        jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel18Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cmbImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtImporteRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transportista", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    btnAgregarTranspR.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    btnAgregarTranspR.setText(">");
    btnAgregarTranspR.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAgregarTranspRActionPerformed(evt);
        }
    });

    btnQuitarTranspR.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    btnQuitarTranspR.setText("<");
    btnQuitarTranspR.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnQuitarTranspRActionPerformed(evt);
        }
    });

    tblTransportista.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Transportista"
        }
    ));
    jScrollPane2.setViewportView(tblTransportista);

    javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
    jPanel21.setLayout(jPanel21Layout);
    jPanel21Layout.setHorizontalGroup(
        jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel21Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                    .addComponent(cmbTranspRep, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnAgregarTranspR))
                .addComponent(btnQuitarTranspR, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(25, 25, 25))
    );
    jPanel21Layout.setVerticalGroup(
        jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel21Layout.createSequentialGroup()
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel21Layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbTranspRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAgregarTranspR)))
                        .addGroup(jPanel21Layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(btnQuitarTranspR)))
                    .addGap(0, 19, Short.MAX_VALUE))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addContainerGap())
    );

    btnBuscarReparacion.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnBuscarReparacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
    btnBuscarReparacion.setText("Buscar");
    btnBuscarReparacion.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBuscarReparacionActionPerformed(evt);
        }
    });

    jLabel25.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
    jLabel25.setText("Detalle de Reparaciones");

    tblReparacion.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "                     Fecha", "Orden N¬∞", "Transportista", "Motivo de Env√≠o", "Importe Total"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, true, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblReparacion.getTableHeader().setResizingAllowed(false);
    tblReparacion.getTableHeader().setReorderingAllowed(false);
    jScrollPane6.setViewportView(tblReparacion);

    btnVerOrden.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnVerOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IrDetalle.png"))); // NOI18N
    btnVerOrden.setText("Ver Orden");
    btnVerOrden.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnVerOrdenActionPerformed(evt);
        }
    });

    btnSalir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
    btnSalir.setText("Salir");
    btnSalir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSalirActionPerformed(evt);
        }
    });

    jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.white));
    jPanel1.setLayout(null);

    jLabel28.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
    jLabel28.setText("Buscar Ordenes por");
    jPanel1.add(jLabel28);
    jLabel28.setBounds(20, 10, 180, 50);

    ckFechaRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    ckFechaRep.setText("Fecha");
    jPanel1.add(ckFechaRep);
    ckFechaRep.setBounds(210, 20, 80, 30);

    ckOrdenRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    ckOrdenRep.setText("N√∫mero Orden");
    jPanel1.add(ckOrdenRep);
    ckOrdenRep.setBounds(300, 20, 130, 30);

    ckTranspRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    ckTranspRep.setText("Transportista");
    jPanel1.add(ckTranspRep);
    ckTranspRep.setBounds(710, 20, 120, 30);

    ckMotivo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    ckMotivo.setText("Motivo de Env√≠o");
    jPanel1.add(ckMotivo);
    ckMotivo.setBounds(570, 20, 120, 30);

    btnAceptarTodosR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
    btnAceptarTodosR.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAceptarTodosRActionPerformed(evt);
        }
    });
    jPanel1.add(btnAceptarTodosR);
    btnAceptarTodosR.setBounds(850, 10, 35, 25);

    btnQuitarTodosR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
    btnQuitarTodosR.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnQuitarTodosRActionPerformed(evt);
        }
    });
    jPanel1.add(btnQuitarTodosR);
    btnQuitarTodosR.setBounds(850, 40, 35, 25);

    ckImporteRep.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
    ckImporteRep.setText("Importe Total");
    jPanel1.add(ckImporteRep);
    ckImporteRep.setBounds(430, 20, 120, 30);

    btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
    btnEliminar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnEliminarActionPerformed(evt);
        }
    });

    jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Motivo de Env√≠o", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

    btnAgregarMotivo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    btnAgregarMotivo.setText(">");
    btnAgregarMotivo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAgregarMotivoActionPerformed(evt);
        }
    });

    btnQuitarMotivo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
    btnQuitarMotivo.setText("<");
    btnQuitarMotivo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnQuitarMotivoActionPerformed(evt);
        }
    });

    tblMotivo.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Motivo"
        }
    ));
    jScrollPane3.setViewportView(tblMotivo);

    javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
    jPanel22.setLayout(jPanel22Layout);
    jPanel22Layout.setHorizontalGroup(
        jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel22Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                    .addComponent(cmbMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnAgregarMotivo))
                .addComponent(btnQuitarMotivo, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(25, 25, 25))
    );
    jPanel22Layout.setVerticalGroup(
        jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel22Layout.createSequentialGroup()
            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel22Layout.createSequentialGroup()
                    .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel22Layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAgregarMotivo)))
                        .addGroup(jPanel22Layout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(btnQuitarMotivo)))
                    .addGap(0, 19, Short.MAX_VALUE))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addContainerGap())
    );

    btnImprimir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
    btnImprimir.setText("Imprimir");
    btnImprimir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnImprimirActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(328, 328, 328)
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 904, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnEliminar))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(413, 413, 413)
                            .addComponent(btnBuscarReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(386, 386, 386)
                            .addComponent(jLabel25))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator9)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(1, 1, 1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnBuscarReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel25)
                    .addGap(1, 1, 1)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(43, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¬øConfirma que desea salir?");
        if (respuesta == 0) {
            dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarTranspRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTranspRActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTransportista.getModel();
        Object fila[]={cmbTranspRep.getSelectedItem()};
        modelo.addRow(fila);
        tblTransportista.setModel(modelo);
    }//GEN-LAST:event_btnAgregarTranspRActionPerformed

    private void btnQuitarTranspRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTranspRActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblTransportista.getModel();
        int fila = tblTransportista.getSelectedRow();
        modelo.removeRow(fila);
        tblTransportista.setModel(modelo);
    }//GEN-LAST:event_btnQuitarTranspRActionPerformed

    private void btnAceptarTodosRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodosRActionPerformed
        if (ckFechaRep.isSelected()) {
            calendarioDRep.setEnabled(true);
            calendarioHRep.setEnabled(true);
        }
        if (ckImporteRep.isSelected()) {
            txtImporteRep.setEnabled(true);
        }
        if (ckOrdenRep.isSelected()) {
            txtOrdenRep.setEnabled(true);
        }
        if (ckTranspRep.isSelected()) {
            btnAgregarTranspR.setEnabled(true);
            btnQuitarTranspR.setEnabled(true);
            tblTransportista.setEnabled(true);
        }
        if (ckMotivo.isSelected()){
            tblMotivo.setEnabled(true);
            btnAgregarMotivo.setEnabled(true);
            btnQuitarMotivo.setEnabled(true);        
        }
    }//GEN-LAST:event_btnAceptarTodosRActionPerformed

    private void btnQuitarTodosRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarTodosRActionPerformed
        calendarioDRep.setEnabled(false);
        calendarioHRep.setEnabled(false);
        txtImporteRep.setEnabled(false);
        txtOrdenRep.setEnabled(false);
        btnAgregarTranspR.setEnabled(false);
        btnQuitarTranspR.setEnabled(false);
        btnAgregarMotivo.setEnabled(false);
        btnQuitarMotivo.setEnabled(false);
        txtOrdenRep.setText("");
        txtImporteRep.setText("");
        DefaultTableModel modelo = (DefaultTableModel) tblMotivo.getModel();
        modelo.setRowCount(0);
        tblMotivo.setModel(modelo);
        DefaultTableModel modelo1 = (DefaultTableModel) tblTransportista.getModel();
        modelo1.setRowCount(0);
        tblMotivo.setModel(modelo1);
        
    }//GEN-LAST:event_btnQuitarTodosRActionPerformed

    private void btnBuscarReparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarReparacionActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
        SimpleDateFormat sdfguion = new SimpleDateFormat("dd-MM-yyyy");
        Date fecha1=sdf.parse(calendarioDRep.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHRep.getText(), new ParsePosition(0));
        DefaultTableModel modeloT = (DefaultTableModel) tblReparacion.getModel();

        
         if(fecha1.before(fecha3)|| calendarioDRep.isEnabled()==false || fecha1.equals(fecha3)){
             
         //Seleccion FECHA    
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
         String numeroOrden = txtOrdenRep.getText();
         String importeTotal = txtImporteRep.getText();
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  //comparo el rango de fechas
                  if ((bandera==0) && (carga.getOrdenServicio() == orden) && (fecha2.after(fecha1)) && (fecha2.before(fecha3)) || fecha2.equals(fecha3) || fecha2.equals(fecha1)) {
                  //Guardo el objeto orden en la tabla
                  gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
             }
         }        
        }
         //Seleccion NRO ORDEN
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  
                   if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (numero >= Integer.parseInt(txtOrdenRep.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (numero == Integer.parseInt(txtOrdenRep.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (numero <= Integer.parseInt(txtOrdenRep.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                 
             }
         }        
        }
         //Seleccion TRANSPORTISTA
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         //Seleccion IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                     }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText()))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText()))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
         
         //Seleccion MOTIVO
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         
         //Seleccion FECHA Y NRO ORDEN
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  
                   if (cmbOrden.getSelectedItem() == ">=") {
                      if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                      //Guardo el objeto orden en la tabla
                     gestorC.cargarTabla(tblReparacion, orden, carga);
                  } //Cierre If carga
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                      //Guardo el objeto orden en la tabla
                      gestorC.cargarTabla(tblReparacion, orden, carga);
                      } //Cierre If carga
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                      //Guardo el objeto orden en la tabla
                      gestorC.cargarTabla(tblReparacion, orden, carga);
                      } //Cierre If carga
                  }
                  //comparo el rango de fechas
                  
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
         
         //Seleccion FECHA, TRANSPORTISTA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         //Seleccion FECHA E IMPORTE
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() == false && txtImporteRep.isEnabled()&& tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                     }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);  
                       }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
         //Seleccion MOTIVO Y FECHA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }             
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
        //Seleccion MOTIVO TRANSPORTISTA
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         //Seleccion MOTIVO IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For    
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For  
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For  
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
         
        
         //Seleccion NRO ORDEN E IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
         String numeroOrden = txtOrdenRep.getText();
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                        if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText()))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText()))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText()))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                   
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
          
          //Seleccion NRO ORDEN Y TRANSPORTISTA
        if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                    if (cmbOrden.getSelectedItem() == ">=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  
                  if (cmbOrden.getSelectedItem() == "=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  } //Cierre For
                  }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
         
        //Seleccion MOTIVO NRO ORDEN
        if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                   if (cmbOrden.getSelectedItem() == ">=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero == Integer.parseInt(txtOrdenRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                    for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero <= Integer.parseInt(txtOrdenRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }//Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
        
        
        //Seleccion MOTIVO NRO ORDEN E IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
         String numeroOrden = txtOrdenRep.getText();
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                   }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                      for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {                       
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                  }
                   
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        
        //Seleccion IMPORTE Y TRANSPORTISTA
        if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        
        
        //Seleccion FECHA NRO ORDEN IMPORTE
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                        if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                    //Guardo el objeto orden en la tabla
                    gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                   
                  }
                 
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
        
        
         //Seleccion MOTIVO IMPORTE FECHA  
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
              Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For    
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For  
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For  
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
         
         //Seleccion MOTIVO NRO ORDEN TRANSPORTISTA
        if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                   if (cmbOrden.getSelectedItem() == ">=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                        for (int j = 0; j < tblTransportista.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                     }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                        for (int j = 0; j < tblTransportista.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }//Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                    for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     for (int j = 0; j < tblTransportista.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                        }
                  }//Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
        
        //Seleccion MOTIVO IMPORTE TRANSPORTISTA
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()==false){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2 = sdf.parse(orden.getFecha(), new ParsePosition(0));
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                    for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        }   
                   }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                    for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        }   
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText()))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        }   
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
                 
        
        //Seleccion FECHA NRO ORDEN TRANSPORTISTA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }

             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                     if (cmbOrden.getSelectedItem() == ">=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  
                  if (cmbOrden.getSelectedItem() == "=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden 
             
         //Seleccion FECHA TRANSPORTISTA IMPORTE
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                  for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                  //Comparo que el importe para traer la orden correspondiente comparo el operador
                     if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) &&  (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                       //Guardo el objeto orden en la tabla
                       gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                       //Comparo que el importe para traer la orden correspondiente comparo el operador
                       if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) &&  (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                        }
                      }
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                      //Comparo que el importe para traer la orden correspondiente comparo el operador 
                      if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))) )) {
                          //Guardo el objeto orden en la tabla
                          gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                      }
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
         
        //Seleccion MOTIVO NRO ORDEN FECHA
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled()==false && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                   if (cmbOrden.getSelectedItem() == ">=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero == Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                    for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     //Comparo que el importe para traer la orden correspondiente
                    if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero <= Integer.parseInt(txtOrdenRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                  } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
        
        
        //Seleccion MOTIVO TRANSPORTISTA FECHA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                        } //Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
         
         
         
         //Seleccion NRO ORDEN TRANSPORTISTA IMPORTE
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                        if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  }
                  }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden 
         
         //Seleccion MOTIVO NRO ORDEN TRANSPORTISTA FECHA
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled()==false && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int numero= orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
              Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                   if (cmbOrden.getSelectedItem() == ">=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                        for (int j = 0; j < tblTransportista.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                     }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                     for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                        for (int j = 0; j < tblTransportista.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }//Cierre If Carga
                        }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                    for (int i = 0; i < tblMotivo.getRowCount(); i++) {
                     for (int j = 0; j < tblTransportista.getRowCount(); j++) {
                        //Comparo que el importe para traer la orden correspondiente
                        if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (numero >= Integer.parseInt(txtOrdenRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        }
                        }
                  }//Cierre For
                    }//Cierre Wile Carga
                } //Cierre While Orden
             } //Cierre If Orden  
        
        //Seleccion MOTIVO IMPORTE TRANSPORTISTA FECHA
         if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled()==false && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
              Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) {
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                    for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        }   
                   }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                    for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        }   
                  }
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                     for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                     for (int j = 0; j < tblMotivo.getRowCount(); j++) {
                     //Comparo que el importe para traer la orden correspondiente
                     if ((bandera==0) && (carga.getOrdenServicio() == orden) && (orden.getMotivo() == tblMotivo.getValueAt(j, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                         //Guardo el objeto orden en la tabla
                         gestorC.cargarTabla(tblReparacion, orden, carga);
                            } //Cierre If Carga
                        } //Cierre For
                     //Comparo que el importe para traer la orden correspondiente
                        }   
                    }
               }//Cierre While Carga        
            } //Cierre While Orden
         }//Cierre If Numero Orden Orden
        
         
         //Seleccion MOTIVO NRO ORDEN IMPORTE TRANSPORTISTA
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         String numeroOrden = txtOrdenRep.getText();
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                   }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                      for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                      for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                   
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
         
        //Seleccion FECHA ORDEN TRANSPORTISTA IMPORTE
        if(calendarioDRep.isEnabled() && calendarioHRep.isEnabled() && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()==false){
        Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1)))) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                        if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1)))) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1)))) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                        for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1)))) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1)))) ) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblTransportista.getRowCount(); i++) {
                        //Comparo que el importe para traer la orden correspondiente comparo el operador
                        if ((bandera==0)&&(carga.getOrdenServicio() == orden) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(i, 0)) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                  }
                  
                  }
                  }
                   
                  }              
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden         
        
        //Seleccion MOTIVO NRO ORDEN IMPORTE TRANSPORTISTA FECHA
         if(calendarioDRep.isEnabled()==false && calendarioHRep.isEnabled()==false && txtOrdenRep.isEnabled() && txtImporteRep.isEnabled() && tblTransportista.isEnabled() && tblMotivo.isEnabled()){
         String numeroOrden = txtOrdenRep.getText();
         Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
         while(ite.hasNext()){
             OrdenServicio orden = (OrdenServicio) ite.next();
             int nroOrden = orden.getNumeroOrden();
             int bandera = gestorC.buscarObjeto(tblReparacion, orden);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(orden.getFecha());
                    System.out.println(fecha2);
                } catch (ParseException ex) {
                    Logger.getLogger(frmConsultaReparaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
             Iterator ite2 = gestorH.listarClase(EnvioTaller.class).iterator();
             //Busco el objeto carga para traer el importe de la orden
             while (ite2.hasNext()) { 
                  EnvioTaller carga = (EnvioTaller) ite2.next();
                  if (cmbImporteRep.getSelectedItem() == ">=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                   }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() >= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                      
                  }
                  if (cmbImporteRep.getSelectedItem() == "=") {
                   if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                      for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() == Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  }                 
                  if (cmbImporteRep.getSelectedItem() == "<=") {
                  if (cmbOrden.getSelectedItem() == ">=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden >= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "=") {
                      for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                      for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden == Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                  if (cmbOrden.getSelectedItem() == "<=") {
                       for (int i = 0; i < tblMotivo.getRowCount(); i++) {   
                       for (int j = 0; j < tblTransportista.getRowCount(); j++) {             
                       if ((bandera==0) && (carga.getOrdenServicio() == orden) && (nroOrden <= Integer.parseInt(txtOrdenRep.getText())) && (carga.getImporteTotal() <= Double.parseDouble(txtImporteRep.getText())) && (orden.getMotivo() == tblMotivo.getValueAt(i, 0)) && (orden.getVehiculo().getTransportista() == tblTransportista.getValueAt(j, 0)) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || ((fecha2.equals(fecha3) || fecha2.equals(fecha1))))) {
                        //Guardo el objeto orden en la tabla
                        gestorC.cargarTabla(tblReparacion, orden, carga);
                    }
                    }
                    }
                  }
                   
                  } //Cierre If carga
             }//Cierre While Carga
         }//Cierre while orden        
        }//Cierre if orden
         
         }else {
         JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");
         }
 
    }//GEN-LAST:event_btnBuscarReparacionActionPerformed

    private void btnVerOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerOrdenActionPerformed
    DefaultTableModel modelo = (DefaultTableModel) tblReparacion.getModel();
    int fila = tblReparacion.getSelectedRow();
    int nroOrden = Integer.parseInt(tblReparacion.getValueAt(fila, 1).toString());
        
    String arc="C:/Reportes AgroGIS/OrdenServicio.jasper";
    GestorDeReportes gestorReportes = new GestorDeReportes(arc);
    gestorReportes.setColeccionDeDatos(gestorC.listarClaseFitradaPorInteger(OrdenServicio.class,"numeroOrden",nroOrden));
    gestorReportes.imprimir();
    }//GEN-LAST:event_btnVerOrdenActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    DefaultTableModel modelo = (DefaultTableModel) tblReparacion.getModel();
    modelo.removeRow(tblReparacion.getSelectedRow());
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarMotivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarMotivoActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblMotivo.getModel();
        Object fila[]={cmbMotivo.getSelectedItem()};
        modelo.addRow(fila);
        tblMotivo.setModel(modelo);    
    }//GEN-LAST:event_btnAgregarMotivoActionPerformed

    private void btnQuitarMotivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarMotivoActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tblMotivo.getModel();
        int fila = tblMotivo.getSelectedRow();
        modelo.removeRow(fila);
        tblMotivo.setModel(modelo);
    }//GEN-LAST:event_btnQuitarMotivoActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
         DefaultTableModel modelot = (DefaultTableModel) tblReparacion.getModel();
         String arc="C:/Reportes AgroGIS/DetalleReparaciones.jasper";
         GestorDeReportes gestorReportes = new GestorDeReportes(arc);
         for(int i=0; i<modelot.getRowCount();i++){
           Iterator ite = gestorH.listarClase(OrdenServicio.class).iterator();
           OrdenServicio orden = (OrdenServicio)ite.next();
           if(orden.getNumeroOrden()== tblReparacion.getValueAt(i, 1)){
           gestorReportes.setColeccionDeDatos(gestorH.listarClaseFitradaPorInteger(OrdenServicio.class, "numeroOrden", orden.getNumeroOrden() ));
            }
            }
         gestorReportes.imprimir();
    }//GEN-LAST:event_btnImprimirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarTodosR;
    private javax.swing.JButton btnAgregarMotivo;
    private javax.swing.JButton btnAgregarTranspR;
    private javax.swing.JButton btnBuscarReparacion;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnQuitarMotivo;
    private javax.swing.JButton btnQuitarTodosR;
    private javax.swing.JButton btnQuitarTranspR;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVerOrden;
    private datechooser.beans.DateChooserCombo calendarioDRep;
    private datechooser.beans.DateChooserCombo calendarioHRep;
    private javax.swing.JCheckBox ckFechaRep;
    private javax.swing.JCheckBox ckImporteRep;
    private javax.swing.JCheckBox ckMotivo;
    private javax.swing.JCheckBox ckOrdenRep;
    private javax.swing.JCheckBox ckTranspRep;
    private javax.swing.JComboBox cmbImporteRep;
    private javax.swing.JComboBox cmbMotivo;
    private javax.swing.JComboBox cmbOrden;
    private javax.swing.JComboBox cmbTranspRep;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JLabel labelUsuario;
    private javax.swing.JTable tblMotivo;
    private javax.swing.JTable tblReparacion;
    private javax.swing.JTable tblTransportista;
    private javax.swing.JTextField txtFechaRep;
    private javax.swing.JTextField txtHoraRep;
    private javax.swing.JTextField txtImporteRep;
    private javax.swing.JTextField txtOrdenRep;
    // End of variables declaration//GEN-END:variables
}
