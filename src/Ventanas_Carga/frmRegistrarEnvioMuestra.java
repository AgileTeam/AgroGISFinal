/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas_Carga;

import Clases_Modulo_Carga.Descarga;
import Clases_Modulo_Carga.Laboratorio;
import Clases_Modulo_Carga.MuestraTomada;
import Clases_Modulo_Transporte.CargaCombustible;
import Clases_Modulo_Transporte.OrdenServicio;
import Clases_Modulo_Viaje.*;
import Gestores_Vista.gestorEnvioMuestras;
import Hibernate.GestorHibernate;
import java.awt.*;
import java.text.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Carolina
 */
public class frmRegistrarEnvioMuestra extends javax.swing.JInternalFrame {
GestorHibernate gestorH = new GestorHibernate();
gestorEnvioMuestras gestorE = new gestorEnvioMuestras();
    /**
     * Creates new form frmRegistrarEnvioMuestras
     */
    public frmRegistrarEnvioMuestra() {
        initComponents();
        gestorH.actualizarUsuario(labelusuario);
        txtFecha.setEnabled(false);
        txtFecha.setEditable(false);
        txtHora.setEditable(false);
        txtHora.setEnabled(false);
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFecha.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHora.setText(formateadorHora.format(calendario.getTime()));
        
        //redimensionar columnas de la tabla envios
        tblEnvios.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblEnvios.getColumnModel().getColumn(1).setPreferredWidth(30);
        tblEnvios.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblEnvios.getColumnModel().getColumn(3).setPreferredWidth(30);
        tblEnvios.getColumnModel().getColumn(4).setPreferredWidth(100);
        //centrar cabecera jtable
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tblEnvios.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);

        
        //redimensionar columnas de la tabla busqueda de muestras
        tblMuestra.getColumnModel().getColumn(0).setPreferredWidth(40);
        tblMuestra.getColumnModel().getColumn(1).setPreferredWidth(40);
        tblMuestra.getColumnModel().getColumn(2).setPreferredWidth(200);
        //centrar cabecera jtable
        DefaultTableCellRenderer renderer2 = (DefaultTableCellRenderer) tblMuestra.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 940;
        int alto = 635;
        this.setSize(ancho, alto);
        this.setLocation(200, 0);
        
        calendarioDMuestra.setEnabled(false);
        calendarioHMuestra.setEnabled(false);
        txtNumMuestra.setEnabled(false);
        cmbProductor.setEnabled(false);
        txtNumMuestra.setText("0");
        
        cmbEspecialidad.setModel(gestorE.rellenaComboEspecialidad());
        cmbLaboratorio.setModel(gestorE.rellenaComboLaboratorio());
        cmbProductor.setModel(gestorE.rellenaComboProductor());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        labelusuario = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        btnAceptarMuestra = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtProductor = new javax.swing.JTextField();
        txtMuestra = new javax.swing.JTextField();
        cmbEspecialidad = new javax.swing.JComboBox();
        cmbLaboratorio = new javax.swing.JComboBox();
        calendarioEnvio = new datechooser.beans.DateChooserCombo();
        txtEstablecimiento = new javax.swing.JTextField();
        txtCereal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtResponsable = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEnvios = new javax.swing.JTable();
        btnEliminarEnvio = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        calendarioHMuestra = new datechooser.beans.DateChooserCombo();
        calendarioDMuestra = new datechooser.beans.DateChooserCombo();
        jPanel13 = new javax.swing.JPanel();
        cmbProductor = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        txtNumMuestra = new javax.swing.JTextField();
        cmbNumMuestra = new javax.swing.JComboBox();
        btnEliminarTodos = new javax.swing.JButton();
        btnAceptarTodos1 = new javax.swing.JButton();
        ckFechaCons = new javax.swing.JCheckBox();
        ckFechaCons1 = new javax.swing.JCheckBox();
        ckFechaCons3 = new javax.swing.JCheckBox();
        btnBuscarMuestra = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMuestra = new javax.swing.JTable();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Envio Muestra");

        jPanel3.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Fecha");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(10, 11, 70, 20);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Hora");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(210, 10, 50, 20);
        jPanel3.add(txtFecha);
        txtFecha.setBounds(50, 10, 80, 20);

        labelusuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelusuario.setText("Usuario");
        jPanel3.add(labelusuario);
        labelusuario.setBounds(770, 10, 70, 15);

        jLabel48.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel3.add(jLabel48);
        jLabel48.setBounds(820, 0, 32, 32);
        jPanel3.add(txtHora);
        txtHora.setBounds(240, 10, 80, 20);

        btnAceptarMuestra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Aceptar.png"))); // NOI18N
        btnAceptarMuestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarMuestraActionPerformed(evt);
            }
        });

        jPanel1.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Productor");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(30, 10, 90, 20);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Establecimiento");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(320, 10, 130, 20);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Responsable");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(340, 70, 90, 20);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Especialidad");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 40, 110, 20);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Nº Muestra");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(670, 10, 100, 20);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Fecha Envío");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(10, 70, 100, 20);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Cereal");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(690, 40, 70, 20);
        jPanel1.add(txtProductor);
        txtProductor.setBounds(90, 10, 200, 20);
        jPanel1.add(txtMuestra);
        txtMuestra.setBounds(740, 10, 100, 20);

        jPanel1.add(cmbEspecialidad);
        cmbEspecialidad.setBounds(90, 40, 200, 20);

        jPanel1.add(cmbLaboratorio);
        cmbLaboratorio.setBounds(420, 40, 210, 20);
        jPanel1.add(calendarioEnvio);
        calendarioEnvio.setBounds(90, 70, 90, 20);
        jPanel1.add(txtEstablecimiento);
        txtEstablecimiento.setBounds(420, 10, 210, 20);
        jPanel1.add(txtCereal);
        txtCereal.setBounds(740, 40, 100, 20);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Laboratorio");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(350, 40, 90, 20);
        jPanel1.add(txtResponsable);
        txtResponsable.setBounds(420, 70, 210, 20);

        tblEnvios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha Envío", "Nº Muestra", "Productor", "Cereal", "Laboratorio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblEnvios);

        btnEliminarEnvio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnEliminarEnvio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEnvioActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnNuevo.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icononuevo.PNG"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
        btnCancelar.setText("Salir");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAgregar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar Muestras por", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha de Muestreo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel10.setLayout(null);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Desde");
        jPanel10.add(jLabel12);
        jLabel12.setBounds(40, 20, 60, 20);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Hasta");
        jPanel10.add(jLabel15);
        jLabel15.setBounds(40, 50, 60, 20);
        jPanel10.add(calendarioHMuestra);
        calendarioHMuestra.setBounds(80, 50, 90, 20);
        jPanel10.add(calendarioDMuestra);
        calendarioDMuestra.setBounds(80, 20, 90, 20);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel13.setLayout(null);

        jPanel13.add(cmbProductor);
        cmbProductor.setBounds(40, 40, 200, 20);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nº Muestra", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel12.setLayout(null);
        jPanel12.add(txtNumMuestra);
        txtNumMuestra.setBounds(120, 40, 90, 20);

        cmbNumMuestra.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">=", "<=", "=" }));
        jPanel12.add(cmbNumMuestra);
        cmbNumMuestra.setBounds(40, 40, 70, 20);

        btnEliminarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnEliminarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarTodosActionPerformed(evt);
            }
        });

        btnAceptarTodos1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAceptarTodos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarTodos1ActionPerformed(evt);
            }
        });

        ckFechaCons.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckFechaCons.setText("Productor");
        ckFechaCons.setContentAreaFilled(false);
        ckFechaCons.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ckFechaCons.setFocusPainted(false);

        ckFechaCons1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckFechaCons1.setText("Nº Muestra");
        ckFechaCons1.setContentAreaFilled(false);
        ckFechaCons1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ckFechaCons1.setFocusPainted(false);

        ckFechaCons3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckFechaCons3.setText("Fecha de Muestreo");
        ckFechaCons3.setContentAreaFilled(false);
        ckFechaCons3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ckFechaCons3.setFocusPainted(false);
        ckFechaCons3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckFechaCons3ActionPerformed(evt);
            }
        });

        btnBuscarMuestra.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnBuscarMuestra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscarMuestra.setText("Buscar");
        btnBuscarMuestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMuestraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnAceptarTodos1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ckFechaCons1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ckFechaCons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ckFechaCons3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnBuscarMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBuscarMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ckFechaCons3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckFechaCons)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckFechaCons1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminarTodos, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(btnAceptarTodos1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblMuestra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha de Muestreo", "Nº Muestra", "Productor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMuestra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE))
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAceptarMuestra)
                                    .addComponent(btnEliminarEnvio, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(329, 329, 329)
                                .addComponent(btnNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(402, 402, 402)
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnAceptarMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(863, 863, 863))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(btnEliminarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ckFechaCons3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckFechaCons3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ckFechaCons3ActionPerformed

    private void btnAceptarTodos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodos1ActionPerformed
        if (ckFechaCons3.isSelected()) {
            calendarioDMuestra.setEnabled(true);
            calendarioHMuestra.setEnabled(true);
        }
        if (ckFechaCons.isSelected()) {
            cmbProductor.setEnabled(true);
           }
        if (ckFechaCons1.isSelected()) {
            txtNumMuestra.setEnabled(true);
        }
    }//GEN-LAST:event_btnAceptarTodos1ActionPerformed

    private void btnEliminarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarTodosActionPerformed
        calendarioDMuestra.setEnabled(false);
        calendarioHMuestra.setEnabled(false);
        txtNumMuestra.setEnabled(false);
        cmbProductor.setEnabled(false);
    }//GEN-LAST:event_btnEliminarTodosActionPerformed

    private void btnBuscarMuestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMuestraActionPerformed
        String numeroMuestra = null;
        String productor = null;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat sdfguion = new SimpleDateFormat("dd-MM-yyyy");
        System.out.println(calendarioDMuestra.getText());
        Date fecha1 = sdf.parse(calendarioDMuestra.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHMuestra.getText(), new ParsePosition(0));
        DefaultTableModel modeloT = (DefaultTableModel) tblMuestra.getModel();
        numeroMuestra = txtNumMuestra.getText();
        productor = cmbProductor.getSelectedItem().toString();
        
         if(fecha1.before(fecha3)|| calendarioDMuestra.isEnabled()==false || fecha1.equals(fecha3)){
        //FECHA
        if(calendarioDMuestra.isEnabled() && calendarioHMuestra.isEnabled() && txtNumMuestra.isEnabled()==false && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2=null;
                    try {
                    fecha2 = sdfguion.parse(descarga.getFecha());
                    } catch (ParseException ex) {
                    Logger.getLogger(frmRegistrarEnvioMuestra.class.getName()).log(Level.SEVERE, null, ex);
                }
                 //comparo el rango de fechas
                  if ((bandera==0) && (d.getDescarga().getNumeroMuestraTomada()==(descarga.getNumeroMuestraTomada())) && (fecha2.after(fecha1)) && (fecha2.before(fecha3)) || fecha2.equals(fecha3) || fecha2.equals(fecha1)) {
                  //Guardo el objeto orden en la tabla
                  gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
             }
         }        
        }
        //PRODUCTOR
        if(calendarioDMuestra.isEnabled()==false && calendarioHMuestra.isEnabled()==false && txtNumMuestra.isEnabled()==false && cmbProductor.isEnabled()){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2=null;
                    try {
                    fecha2 = sdfguion.parse(descarga.getFecha());
                    System.out.println(fecha2);
                    } catch (ParseException ex) {
                    Logger.getLogger(frmRegistrarEnvioMuestra.class.getName()).log(Level.SEVERE, null, ex);
                }
             
                  //comparo el rango de fechas
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && descarga.getProductor().getNombre().equalsIgnoreCase(productor)) {
                  //Guardo el objeto orden en la tabla
                  gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
             }
         }        
        }
       
        //NRO MUESTRA
        if(calendarioDMuestra.isEnabled()==false && calendarioHMuestra.isEnabled()==false && txtNumMuestra.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2 = sdf.parse(descarga.getFecha(), new ParsePosition(0));
                  //comparo el rango de fechas
                  if(cmbNumMuestra.getSelectedItem() == ">="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() >= Long.parseLong(numeroMuestra)) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "<="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() <= Long.parseLong(numeroMuestra)) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() == Long.parseLong(numeroMuestra)) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
             }
         }        
        }
        
         //FECHA - PRODUCTOR
        if(calendarioDMuestra.isEnabled() && calendarioHMuestra.isEnabled() && txtNumMuestra.isEnabled()==false && cmbProductor.isEnabled()){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2 = sdf.parse(descarga.getFecha(), new ParsePosition(0));
                  //comparo el rango de fechas
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && (fecha2.after(fecha1)) && (fecha2.before(fecha3)) && descarga.getProductor().getNombre().equalsIgnoreCase(productor)) {
                  //Guardo el objeto orden en la tabla
                  gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
             }
         }        
        }
        
        //FECHA NRO MUESRTRA
        if(calendarioDMuestra.isEnabled() && calendarioHMuestra.isEnabled() && txtNumMuestra.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2 = sdf.parse(descarga.getFecha(), new ParsePosition(0));
                  if(cmbNumMuestra.getSelectedItem() == ">="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() >= Long.parseLong(numeroMuestra) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "<="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() <= Long.parseLong(numeroMuestra) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() == Long.parseLong(numeroMuestra) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
             }
         }        
        }
        
        //NRO MUESTRA PRODUCTOR
        if(calendarioDMuestra.isEnabled()==false && calendarioHMuestra.isEnabled()==false && txtNumMuestra.isEnabled() && cmbProductor.isEnabled()){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2 = sdf.parse(descarga.getFecha(), new ParsePosition(0));
                  //comparo el rango de fechas
                  if(cmbNumMuestra.getSelectedItem() == ">="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() >= Long.parseLong(numeroMuestra) && descarga.getProductor().getNombre().equalsIgnoreCase(productor)) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "<="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() <= Long.parseLong(numeroMuestra) && descarga.getProductor().getNombre().equalsIgnoreCase(productor)) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() == Long.parseLong(numeroMuestra) && descarga.getProductor().getNombre().equalsIgnoreCase(productor)) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
             }
         }        
        }
        
        //NRO MUESTRA PRODUCTOR FECHA
        if(calendarioDMuestra.isEnabled() && calendarioHMuestra.isEnabled() && txtNumMuestra.isEnabled() && cmbProductor.isEnabled()){
         Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
         while(ite.hasNext()){
             MuestraTomada d = (MuestraTomada) ite.next();
             int bandera = gestorE.buscarObjeto(tblMuestra, d);
             Iterator ite2 = gestorH.listarClase(Descarga.class).iterator();
             while (ite2.hasNext()) {
                  Descarga descarga = (Descarga) ite2.next();
                  Date fecha2 = sdf.parse(descarga.getFecha(), new ParsePosition(0));
                  //comparo el rango de fechas
                  if(cmbNumMuestra.getSelectedItem() == ">="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && (d.getNumeroMuestra() >= Long.parseLong(txtNumMuestra.getText())) && (descarga.getProductor().getNombre().equalsIgnoreCase(productor)) && ((fecha2.after(fecha1)) && (fecha2.before(fecha3)))) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "<="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() <= Long.parseLong(txtNumMuestra.getText()) && descarga.getProductor().getNombre().equalsIgnoreCase(productor) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
                  if(cmbNumMuestra.getSelectedItem() == "="){
                  if ((bandera==0) && (d.getDescarga().equals(descarga)) && d.getNumeroMuestra() == Long.parseLong(txtNumMuestra.getText()) && descarga.getProductor().getNombre().equalsIgnoreCase(productor) && (fecha2.after(fecha1)) && (fecha2.before(fecha3))) {
                    gestorE.cargarTabla(tblMuestra, d, descarga);
                  }
                  }
             }
         }        
        }
        }else {
         JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");
         }
        
    }//GEN-LAST:event_btnBuscarMuestraActionPerformed

    private void btnAceptarMuestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarMuestraActionPerformed
    DefaultTableModel modeloTabla = (DefaultTableModel) tblMuestra.getModel();
  
    int fila = tblMuestra.getSelectedRow();
    txtProductor.setText(modeloTabla.getValueAt(fila,2).toString());
    Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
    while(ite.hasNext()){
          MuestraTomada m = (MuestraTomada)ite.next();
          if(m.getNumeroMuestra()== modeloTabla.getValueAt(fila,1)){
              txtEstablecimiento.setText(m.getDescarga().getEstablecimiento().toString());
              txtMuestra.setText(String.valueOf(m.getNumeroMuestra()));
              txtCereal.setText(m.getDescarga().getCereal().toString());
          }
    }
    
    }//GEN-LAST:event_btnAceptarMuestraActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
       DefaultTableModel modeloTabla = (DefaultTableModel) tblEnvios.getModel();
       Object fila[]={calendarioEnvio.getText(), txtMuestra.getText(), txtProductor.getText(), txtCereal.getText(), cmbLaboratorio.getSelectedItem()};
       modeloTabla.addRow(fila);
       tblEnvios.setModel(modeloTabla);
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarEnvioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEnvioActionPerformed
        DefaultTableModel modeloTabla = (DefaultTableModel) tblEnvios.getModel();
        int fila = tblEnvios.getSelectedRow();
        modeloTabla.removeRow(fila);
        tblEnvios.setModel(modeloTabla);
    }//GEN-LAST:event_btnEliminarEnvioActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        DefaultTableModel modeloTabla = (DefaultTableModel) tblEnvios.getModel();
        for(int i=0; i<tblEnvios.getRowCount(); i++){
            Iterator ite = gestorH.listarClase(MuestraTomada.class).iterator();
            while(ite.hasNext()){
                MuestraTomada muestra = (MuestraTomada)ite.next();
                System.out.println(modeloTabla.getValueAt(i, 1));
                if(muestra.getNumeroMuestra() == Long.parseLong(modeloTabla.getValueAt(i, 1).toString())){
                    muestra.setFechaEnvio(modeloTabla.getValueAt(i, 0).toString());
                    muestra.setLaboratorio((Laboratorio)modeloTabla.getValueAt(i, 4));
                    muestra.setEstado(1);
                    muestra.setResponsableEnvio(txtResponsable.getText());
                    gestorH.actualizarObjeto(muestra);
                }
        }
            
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        DefaultTableModel modeloT = (DefaultTableModel) tblMuestra.getModel();
        DefaultTableModel modeloT2 = (DefaultTableModel) tblEnvios.getModel();
        calendarioDMuestra.setEnabled(false);
        calendarioHMuestra.setEnabled(false);
        txtNumMuestra.setEnabled(false);
        cmbProductor.setEnabled(false);
        txtProductor.setText("");
        txtEstablecimiento.setText("");
        txtCereal.setText("");
        txtResponsable.setText("");
        txtMuestra.setText("");
        for(int i=0; i<modeloT.getRowCount(); i++){
            modeloT.removeRow(i);
            tblMuestra.setModel(modeloT);
        }
        for(int i=0; i<modeloT2.getRowCount(); i++){
            modeloT.removeRow(i);
            tblEnvios.setModel(modeloT2);
        }
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea salir?");
        if (respuesta==0){
        dispose();
    }
    }//GEN-LAST:event_btnCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarMuestra;
    private javax.swing.JButton btnAceptarTodos1;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscarMuestra;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminarEnvio;
    private javax.swing.JButton btnEliminarTodos;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private datechooser.beans.DateChooserCombo calendarioDMuestra;
    private datechooser.beans.DateChooserCombo calendarioEnvio;
    private datechooser.beans.DateChooserCombo calendarioHMuestra;
    private javax.swing.JCheckBox ckFechaCons;
    private javax.swing.JCheckBox ckFechaCons1;
    private javax.swing.JCheckBox ckFechaCons3;
    private javax.swing.JComboBox cmbEspecialidad;
    private javax.swing.JComboBox cmbLaboratorio;
    private javax.swing.JComboBox cmbNumMuestra;
    private javax.swing.JComboBox cmbProductor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelusuario;
    private javax.swing.JTable tblEnvios;
    private javax.swing.JTable tblMuestra;
    private javax.swing.JTextField txtCereal;
    private javax.swing.JTextField txtEstablecimiento;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtMuestra;
    private javax.swing.JTextField txtNumMuestra;
    private javax.swing.JTextField txtProductor;
    private javax.swing.JTextField txtResponsable;
    // End of variables declaration//GEN-END:variables
}
