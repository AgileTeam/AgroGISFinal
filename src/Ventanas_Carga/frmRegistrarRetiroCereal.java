/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmRegistrarRetiroCereal.java
 *
 * Created on 05/11/2011, 22:24:13
 */
package Ventanas_Carga;


import Clases_Modulo_Carga.*;
import Clases_Modulo_Transporte.OrdenServicio;
import Clases_Modulo_Transporte.Vehiculo;
import Clases_Modulo_Viaje.Viaje;
import Gestores_Clases.gestorBitacora;
import Gestores_Vista.gestorFecha;
import Gestores_Vista.gestorRegistrarRetiro;
import Hibernate.GestorHibernate;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 *
 * @author Charito
 */
public class frmRegistrarRetiroCereal extends javax.swing.JInternalFrame {
GestorHibernate gestorH = new GestorHibernate();
gestorRegistrarRetiro gestorR = new gestorRegistrarRetiro();
    /** Creates new form frmRegistrarRetiroCereal */
    public frmRegistrarRetiroCereal() {
        initComponents();      
        gestorH.actualizarUsuario(labelusuario);
        txtFecha.setEnabled(false);
        txtFecha.setEditable(false);
        txtHora.setEditable(false);
        txtHora.setEnabled(false);
        
        calendarioDSolicitud.setEnabled(false);
        calendarioHSolicitud.setEnabled(false);
        txtNumSolicitud.setEnabled(false);
        cmbProductor.setModel(gestorR.rellenaComboProductor());
        cmbProductor.setEnabled(false);
        //setear el campo de fecha con la del sistema
        GregorianCalendar gc=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        gc.get(Calendar.DAY_OF_WEEK);
        gc.get(Calendar.MONTH);
        gc.get(Calendar.YEAR);
        SimpleDateFormat formateador= new SimpleDateFormat("dd-MM-yyyy");
        txtFecha.setText(formateador.format(gc.getTime()));
        //setear el campo de hora con la del sistema
        GregorianCalendar calendario=new GregorianCalendar();
        GregorianCalendar.getInstance();
        gc.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        calendario.get(Calendar.HOUR);
        calendario.get(Calendar.MINUTE);
        SimpleDateFormat formateadorHora=new SimpleDateFormat("HH:mm");
        txtHora.setText(formateadorHora.format(calendario.getTime()));
        
       
        //Las siguientes lineas son para dar a la pantalla el tamaño requerido y luego centrarla en la pantalla.
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension tamanioPantalla = kit.getScreenSize();
        int ancho = 820;
        int alto = 580;
        int posX = (int) ((tamanioPantalla.width - ancho) / 2);
//        int posY = (int) ((tamanioPantalla.height - alto) / 2);
        this.setSize(ancho, alto);
        this.setLocation(posX, 20);
        
         //redimensionar columnas de la tabla
        tblSolicitud.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblSolicitud.getColumnModel().getColumn(1).setPreferredWidth(100);  
        tblSolicitud.getColumnModel().getColumn(2).setPreferredWidth(100); 
        tblSolicitud.getColumnModel().getColumn(3).setPreferredWidth(70); 
        
        //centrar cabecera jtable
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tblSolicitud.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);



        
//        cmb.setEditable(true);
//        AutoCompleteDecorator.decorate(this.cmb);

    }


    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        labelusuario = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtNumeroSolicitud = new javax.swing.JTextField();
        txtTipoCereal = new javax.swing.JTextField();
        txtFechaViaje = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProductor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSilo = new javax.swing.JTextField();
        txtTnDisponibles = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtTnExtraidas = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolicitud = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnAceptarSolicitud1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnBuscarSolicitud = new javax.swing.JButton();
        ckFecha = new javax.swing.JCheckBox();
        ckNumSolicitud = new javax.swing.JCheckBox();
        ckProductor = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        calendarioHSolicitud = new datechooser.beans.DateChooserCombo();
        calendarioDSolicitud = new datechooser.beans.DateChooserCombo();
        jPanel12 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txtNumSolicitud = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        cmbProductor = new javax.swing.JComboBox();
        btnAceptarTodos1 = new javax.swing.JButton();
        btnCancelarTodos = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setTitle("Retiro de Cereal");

        jPanel3.setLayout(null);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Fecha");
        jPanel3.add(jLabel9);
        jLabel9.setBounds(10, 10, 60, 20);
        jPanel3.add(txtFecha);
        txtFecha.setBounds(50, 10, 80, 20);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setText("Hora");
        jPanel3.add(jLabel10);
        jLabel10.setBounds(180, 10, 40, 20);
        jPanel3.add(txtHora);
        txtHora.setBounds(210, 10, 80, 20);

        labelusuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labelusuario.setText("Usuario");
        jPanel3.add(labelusuario);
        labelusuario.setBounds(680, 10, 50, 15);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/UsuarioLogueado.png"))); // NOI18N
        jPanel3.add(jLabel12);
        jLabel12.setBounds(730, 0, 30, 30);

        btnSalir.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jPanel5.setLayout(null);

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Tipo Cereal");
        jPanel5.add(jLabel17);
        jLabel17.setBounds(360, 50, 100, 20);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText("Solicitud N°");
        jPanel5.add(jLabel18);
        jLabel18.setBounds(20, 20, 100, 20);

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setText("Fecha Viaje");
        jPanel5.add(jLabel19);
        jLabel19.setBounds(600, 20, 110, 20);
        jPanel5.add(txtNumeroSolicitud);
        txtNumeroSolicitud.setBounds(90, 20, 110, 20);
        jPanel5.add(txtTipoCereal);
        txtTipoCereal.setBounds(430, 50, 140, 20);
        jPanel5.add(txtFechaViaje);
        txtFechaViaje.setBounds(670, 20, 110, 20);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Tipo Solicitud");
        jPanel5.add(jLabel4);
        jLabel4.setBounds(300, 20, 100, 20);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("RETIRO EN PLANTA");
        jPanel5.add(jLabel1);
        jLabel1.setBounds(380, 20, 150, 20);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Productor");
        jPanel5.add(jLabel2);
        jLabel2.setBounds(30, 50, 100, 20);
        jPanel5.add(txtProductor);
        txtProductor.setBounds(90, 50, 230, 20);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Silo Nº");
        jPanel5.add(jLabel3);
        jLabel3.setBounds(630, 50, 70, 20);
        jPanel5.add(txtSilo);
        txtSilo.setBounds(670, 50, 110, 20);
        jPanel5.add(txtTnDisponibles);
        txtTnDisponibles.setBounds(430, 80, 110, 20);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Toneladas Extraídas");
        jPanel5.add(jLabel6);
        jLabel6.setBounds(20, 80, 150, 20);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Toneladas Disponibles");
        jPanel5.add(jLabel8);
        jLabel8.setBounds(290, 80, 160, 20);
        jPanel5.add(txtTnExtraidas);
        txtTnExtraidas.setBounds(140, 80, 110, 20);

        tblSolicitud.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Solicitud N°", "Productor", "Fecha de Emisión", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSolicitud.getTableHeader().setResizingAllowed(false);
        tblSolicitud.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSolicitud);

        btnGuardar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnAceptarSolicitud1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnAceptarSolicitud1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Aceptar.png"))); // NOI18N
        btnAceptarSolicitud1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarSolicitud1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar Solicitudes Pendientes por", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        jPanel1.setLayout(null);

        btnBuscarSolicitud.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnBuscarSolicitud.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscarSolicitud.setText("Buscar");
        btnBuscarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarSolicitudActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscarSolicitud);
        btnBuscarSolicitud.setBounds(380, 120, 104, 30);

        ckFecha.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckFecha.setText("Fecha Emisión");
        ckFecha.setFocusPainted(false);
        jPanel1.add(ckFecha);
        ckFecha.setBounds(10, 30, 110, 22);

        ckNumSolicitud.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckNumSolicitud.setText("Número Solicitud");
        ckNumSolicitud.setFocusPainted(false);
        jPanel1.add(ckNumSolicitud);
        ckNumSolicitud.setBounds(10, 50, 130, 22);

        ckProductor.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        ckProductor.setText("Productor");
        ckProductor.setFocusPainted(false);
        jPanel1.add(ckProductor);
        ckProductor.setBounds(10, 70, 100, 22);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha Emisión", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel10.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Desde");
        jPanel10.add(jLabel7);
        jLabel7.setBounds(30, 20, 60, 20);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Hasta");
        jPanel10.add(jLabel13);
        jLabel13.setBounds(30, 50, 60, 20);
        jPanel10.add(calendarioHSolicitud);
        calendarioHSolicitud.setBounds(70, 50, 90, 20);
        jPanel10.add(calendarioDSolicitud);
        calendarioDSolicitud.setBounds(70, 20, 90, 20);

        jPanel1.add(jPanel10);
        jPanel10.setBounds(140, 20, 200, 90);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nº Solicitud", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel12.setLayout(null);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Nº");
        jPanel12.add(jLabel14);
        jLabel14.setBounds(30, 40, 50, 20);
        jPanel12.add(txtNumSolicitud);
        txtNumSolicitud.setBounds(50, 40, 120, 20);

        jPanel1.add(jPanel12);
        jPanel12.setBounds(340, 20, 200, 90);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel13.setLayout(null);

        jPanel13.add(cmbProductor);
        cmbProductor.setBounds(20, 40, 200, 20);

        jPanel1.add(jPanel13);
        jPanel13.setBounds(540, 20, 240, 90);

        btnAceptarTodos1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icono_mas.png"))); // NOI18N
        btnAceptarTodos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarTodos1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnAceptarTodos1);
        btnAceptarTodos1.setBounds(20, 110, 30, 30);

        btnCancelarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnCancelarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarTodosActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelarTodos);
        btnCancelarTodos.setBounds(60, 110, 30, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(302, 302, 302)
                                .addComponent(btnGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAceptarSolicitud1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAceptarSolicitud1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)))
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
    int respuesta = JOptionPane.showConfirmDialog(null, "¿Confirma que desea salir?");
    if (respuesta==0){
    dispose();
    }
}//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        GestorHibernate gestorH = new GestorHibernate();
        Retiro retiro = new Retiro();
        Iterator ite2 = gestorH.listarClase(SolicitudRetiro.class).iterator();
        while(ite2.hasNext()){
            SolicitudRetiro solicitud = (SolicitudRetiro) ite2.next();
            if(solicitud.getNumeroSolicitud()== Long.parseLong(txtNumeroSolicitud.getText())){
                solicitud.setEstado("Utilizada");
                gestorH.actualizarObjeto(solicitud);
                retiro.setSolicitud(solicitud);
                retiro.setToneladas(Double.parseDouble(txtTnExtraidas.getText()));
                
            Iterator iteV = gestorH.listarClaseFitradaPorString(Viaje.class, "estado", "Pendiente").iterator();
            while(iteV.hasNext()){
                Viaje viaje = (Viaje) iteV.next();
                if(viaje.getSolicitud().equals(solicitud)){
                    txtFechaViaje.setText(viaje.getFecha());
                    gestorBitacora gestorB = new gestorBitacora();
                    gestorB.cargarBitacora(String.valueOf(viaje.getIdViaje()), txtFecha.getText(), 15, labelusuario.getText(), "");
                }
            
            }
        }
        }
        gestorH.guardarObjeto(retiro);
        JOptionPane.showMessageDialog(null, "Los datos se han guardado correctamente");
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAceptarSolicitud1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarSolicitud1ActionPerformed
    DefaultTableModel modeloTabla = (DefaultTableModel) tblSolicitud.getModel();
    int fila = tblSolicitud.getSelectedRow();
    Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
    while(ite.hasNext()){
        SolicitudRetiro sol = (SolicitudRetiro)ite.next();
        if(sol.getNumeroSolicitud()== modeloTabla.getValueAt(fila,0)){
            txtNumeroSolicitud.setText(modeloTabla.getValueAt(fila, 0).toString());
            txtProductor.setText(sol.getProductor().toString());
            txtTipoCereal.setText(sol.getTipoCereal().toString());         
        
        Iterator ite2 = gestorH.listarClase(Viaje.class).iterator();
        while(ite2.hasNext()){
            Viaje viaje = (Viaje)ite2.next();
            if(viaje.getSolicitud() == sol){
                txtFechaViaje.setText(viaje.getFecha());
            }
        }
        
         Iterator ite6 = gestorH.listarClase(EstablecimientoPorSolicitud.class).iterator();
         while(ite6.hasNext()){
             EstablecimientoPorSolicitud est = (EstablecimientoPorSolicitud) ite6.next();
             if(est.getSolicitud() == sol){
                 txtTnExtraidas.setText(String.valueOf(est.getToneladasAExtraer()));
             }
         }
         Iterator ite7 = gestorH.listarClase(PuertoPorSolicitud.class).iterator();
         while(ite7.hasNext()){
             PuertoPorSolicitud puerto = (PuertoPorSolicitud) ite7.next();
             if(puerto.getSolicitud() == sol){
                 txtTnExtraidas.setText(String.valueOf(puerto.getToneladasAExtraer()));
             }
         }
    
        
        Iterator ite3 = gestorH.listarClase(ToneladasPorCereal.class).iterator();
                while(ite3.hasNext()){
                    ToneladasPorCereal ton = (ToneladasPorCereal) ite3.next();
                    if((ton.getHistorial().getProductor().getNombre().equalsIgnoreCase(txtProductor.getText()))&& (ton.getTipoCereal().getNombreCereal().equalsIgnoreCase(txtTipoCereal.getText()))){
                        txtTnDisponibles.setText(String.valueOf(ton.getToneladas()));
                    }
            }
        
            Iterator iteP = gestorH.listarClase(PuertoPorSolicitud.class).iterator();
            while(iteP.hasNext()){
                PuertoPorSolicitud p = (PuertoPorSolicitud) iteP.next();
                if(p.getSolicitud().equals(sol)){
                    txtSilo.setText(p.getSilo().toString());
                }
             }
            Iterator iteE = gestorH.listarClase(EstablecimientoPorSolicitud.class).iterator();
            while(iteE.hasNext()){
                EstablecimientoPorSolicitud e = (EstablecimientoPorSolicitud) iteE.next();
                if(e.getSolicitud().equals(sol)){
                    txtSilo.setText(e.getSilo().toString());
                }
             }
    }
    }
    }//GEN-LAST:event_btnAceptarSolicitud1ActionPerformed

    private void btnBuscarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarSolicitudActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
        SimpleDateFormat sdfguion = new SimpleDateFormat("dd/MM/yy");
        Date fecha1 = sdf.parse(calendarioDSolicitud.getText(), new ParsePosition(0));
        Date fecha3 = sdf.parse(calendarioHSolicitud.getText(), new ParsePosition(0));
        DefaultTableModel modeloT = (DefaultTableModel) tblSolicitud.getModel();
        
        if(fecha1.before(fecha3)|| calendarioDSolicitud.isEnabled()==false || fecha1.equals(fecha3)){
        
        //Consulta por FECHA
         if(calendarioDSolicitud.isEnabled() && calendarioHSolicitud.isEnabled() && txtNumSolicitud.isEnabled()==false && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                    System.out.println(fecha2);
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) && (((fecha2.after(fecha1)) && (fecha2.before(fecha3))) || (fecha2.equals(fecha3) || fecha2.equals(fecha1)))) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         }        
        
         //Consulta por NRO SOLICITUD
         if(calendarioDSolicitud.isEnabled()==false && calendarioHSolicitud.isEnabled()==false && txtNumSolicitud.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) &&(solicitud.getNumeroSolicitud()== Long.parseLong(txtNumSolicitud.getText()))) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         }  
       
           //Consulta por PRODUCTOR
         if(calendarioDSolicitud.isEnabled()==false && calendarioHSolicitud.isEnabled()==false && txtNumSolicitud.isEnabled()==false && cmbProductor.isEnabled()){
         Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) &&(solicitud.getProductor().equals(cmbProductor.getSelectedItem()))) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         }  
         
           //Consulta por FECHA NRO SOLICITUD
         if(calendarioDSolicitud.isEnabled() && calendarioHSolicitud.isEnabled() && txtNumSolicitud.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) &&(solicitud.getNumeroSolicitud()== Long.parseLong(txtNumSolicitud.getText())) &&  ((fecha2.after(fecha1)) && (fecha2.before(fecha3)) || fecha2.equals(fecha3) || fecha2.equals(fecha1))) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         }  
         //Consulta por FECHA PRODUCTOR
           if(calendarioDSolicitud.isEnabled() && calendarioHSolicitud.isEnabled() && txtNumSolicitud.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) &&(solicitud.getProductor().equals(cmbProductor.getSelectedItem())) &&  ((fecha2.after(fecha1)) && (fecha2.before(fecha3)) || fecha2.equals(fecha3) || fecha2.equals(fecha1))) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         }  
           
         //Consulta por PRODUCTOR NRO SOLICITUD  
         if(calendarioDSolicitud.isEnabled() && calendarioHSolicitud.isEnabled() && txtNumSolicitud.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClase(SolicitudRetiro.class).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) &&(solicitud.getProductor().equals(cmbProductor.getSelectedItem())) &&  (solicitud.getNumeroSolicitud()== Long.parseLong(txtNumSolicitud.getText()))) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         }    
         
           //Consulta por FECHA PRODUCTOR NRO SOLICITUD
           if(calendarioDSolicitud.isEnabled() && calendarioHSolicitud.isEnabled() && txtNumSolicitud.isEnabled() && cmbProductor.isEnabled()==false){
         Iterator ite = gestorH.listarClaseFitradaPorInteger(SolicitudRetiro.class, "tipoSolicitud", 2).iterator();
         while(ite.hasNext()){
             SolicitudRetiro solicitud = (SolicitudRetiro) ite.next();
             int bandera = gestorR.buscarObjeto(tblSolicitud, solicitud);
             Date fecha2=null;
                try {
                    fecha2 = sdfguion.parse(solicitud.getFechaSolicitud());
                } catch (java.text.ParseException ex) {
                    Logger.getLogger(frmRegistrarRetiroCereal.class.getName()).log(Level.SEVERE, null, ex);
                }
             if ((bandera==0) && (solicitud.getEstado().equalsIgnoreCase("Pendiente")) && (solicitud.getTipoSolicitud().getIdTipoSolicitud()==2) &&(solicitud.getProductor().equals(cmbProductor.getSelectedItem())) &&  ((fecha2.after(fecha1)) && (fecha2.before(fecha3)) || fecha2.equals(fecha3) || fecha2.equals(fecha1)) && solicitud.getNumeroSolicitud()==Long.parseLong(txtNumSolicitud.getText())) {
                  //Guardo el objeto orden en la tabla
                  gestorR.cargarTabla(tblSolicitud, solicitud);
                  }
             }
         } 
        }else{JOptionPane.showMessageDialog(null, "Ingrese correctamente el rango de Fechas");}
    }//GEN-LAST:event_btnBuscarSolicitudActionPerformed

    private void btnAceptarTodos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarTodos1ActionPerformed
         if (ckFecha.isSelected()) {
            calendarioDSolicitud.setEnabled(true);
            calendarioHSolicitud.setEnabled(true);
        }
           if (ckNumSolicitud.isSelected()) {
            txtNumSolicitud.setEnabled(true);
        }
            if (ckProductor.isSelected()) {
            cmbProductor.setEnabled(true);
        }
    }//GEN-LAST:event_btnAceptarTodos1ActionPerformed

    private void btnCancelarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarTodosActionPerformed
        calendarioDSolicitud.setEnabled(false);
        calendarioHSolicitud.setEnabled(false);
        txtNumSolicitud.setEnabled(false);
        cmbProductor.setEnabled(false);
    }//GEN-LAST:event_btnCancelarTodosActionPerformed
   



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarSolicitud1;
    private javax.swing.JButton btnAceptarTodos1;
    private javax.swing.JButton btnBuscarSolicitud;
    private javax.swing.JButton btnCancelarTodos;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private datechooser.beans.DateChooserCombo calendarioDSolicitud;
    private datechooser.beans.DateChooserCombo calendarioHSolicitud;
    private javax.swing.JCheckBox ckFecha;
    private javax.swing.JCheckBox ckNumSolicitud;
    private javax.swing.JCheckBox ckProductor;
    private javax.swing.JComboBox cmbProductor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelusuario;
    private javax.swing.JTable tblSolicitud;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFechaViaje;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtNumSolicitud;
    private javax.swing.JTextField txtNumeroSolicitud;
    private javax.swing.JTextField txtProductor;
    private javax.swing.JTextField txtSilo;
    private javax.swing.JTextField txtTipoCereal;
    private javax.swing.JTextField txtTnDisponibles;
    private javax.swing.JTextField txtTnExtraidas;
    // End of variables declaration//GEN-END:variables
}
